а меня зовут

егорий я с ума

технически евангелист

делаю софт я делаю

очень долго уже больше 15 лет я его

делаю сам я руковожу его разработка я

консультирую его разработку и я стараюсь

выступать на разных мероприятиях чтобы

делиться небольшим накопленным опытом

собирается критику и становиться

немножко лучше скажите коллеги кто из

вас был на прошлом python митап минска

12 примерно половина зала замечательно я

буду чуть чуть повторяться но это ничего

страшного потому что разработка сорта

эта область

новая неизведанная практически как

автомобилестроения в первые 30 лет когда

двигатель на крыше ставили и поэтому

многие момент они еще настолько не

устаканились что про них можно

рассказать и 2 и 3 и даже в ряде случаев

четыре раза

кто еще не видел я практически в каждом

своем выступлении знакомлю слушателей с

супергероем и вы тоже познакомьтесь

кто-то по второму разу вам супер герои

отождествляет собой ретроспективное

когнитивные искажения на самом деле мое

любимое огни тивно и искажение наш мозг

он работает своеобразно

вот вы все думаете что вы такие разумные

существа логичные я в целом тоже так

думаю что мы принимаем решение

основываясь на фактах но на самом деле

это не всегда так очень часто мы думаем

принимаем решение вообще действуем

вопреки всякой логике я просто потому

что у нас тушка определенным образом

устроено и в частности есть

ретроспективные как дни тивные искажения

как оно работает я говорю какую-нибудь

фразу например один в поле не воин в эту

фразу слышите кажется ну да логично все

какой там поля какой-то мадину стопудово

не воин это на самом деле всегда так кто

бы вам что ни сказал чтобы вы не

прочитали вы всегда будете это

воспринимать как очевидное будете этому

верить просто потому что у нас

эволюционно не сложился

организм недоверия сказанному или

написанному потому что если есть сейчас

скажу и один в поле воин прямую

противоположность

то вы все равно посчитаете что это

абсолютно логично и очевидно механик

этого процесс очень просто когда вы

что-нибудь слышите или читаете ваш мозг

сначала добавляет это в картину мира а

потом осознает уже с добавленным в

картину мира поэтому вам кажется что вы

всегда об этом знали

к сожалению минут через 10-15 сказанное

выгрузиться из вашей кратковременной

памяти вы это забудете больнее всего

ретроспективные карнитина искажение она

бьет студентов таких специальности как

например психология когда они читают

учебник им кажется что это сборник

банальность просто там вот чего не

прочтут все очевидно ежу понятно

потом они приходят на экзамен и там

нужно выбрать один вариант из четырех

они смотрят на все четыре варианта

очевидно ежу понятно но правильный

только один вот они первые три года так

мучаются пока не обучаются фильтровать

это как бы очевидность поэтому

относитесь к моим словам критическим вам

будет казаться что вы всегда это знали

но к сожалению это не всегда так сегодня

буду говорить об очень простой вещи

которые немножко перекликается с моим

предыдущим выступлением но совсем

немножко буду говорить про

идентификаторы в коде на тайтоне и не

только на пойти не кстати все примеры

взяты из джанга ну там чуть-чуть

модифицированные и так когда мы общаемся

с коллегами коллеги общаются с нами мы

как-то вообще обсуждаем как же писать

код мы нередко говорим что ребят не надо

называть идентификаторы ижика это плохо

над давать осмысленные названия

переменным идентификатором как правило

вот дальше утверждения что название

должны быть а

смысле нами она не идет буксует поэтому

каждый разработчик он называет как-то и

она как-то работать прежде чем

рассказывать про какие-то сложные

закономерности посмотрим а зачем вообще

заморачиваться и как-то называть

идентификаторы но вот код в нем

идентификаторы

названные задней левой лапы этого же

кота и в целом потратив пару минут в

этом коде вполне можно разобраться до но

он не то чтобы очень сложный к сожалению

во всех учебниках рассматриваются халлоу

варды на практике код он не маленький он

вот реально совсем не маленький там

обычно мегабайт 210 и нам с этим кодом

нужно что-то много делать и поэтому в

зависимости от того легко читается или

нет зависит вообще сможем ли мы

что-нибудь с этим кодом сделать об этом

кстати чуть-чуть поподробнее у нас есть

другое когнитивное искажение но на

втором почетном месте не совсем

когнитивное искажение скорее

закономерность закономерность кошелька

миллера был такой ученый исследователь

миллер который проводил бесчеловечные

эксперименты на коллегах и сотрудниках и

выявил закономерность что когда

человеческий мозг оперирует какими-то

объектами например книжку читает или

пишет или в шахматы играет в нашем

фокусе внимания

умещается не то чтобы очень большое

количество объектов у большинства людей

от 5 до 9

что это значит если я возьму

среднестатистического человека такого

сферического вакууме и выложу перед ним

5 игральных карт он сможет запомнить

какие карточки лежат на столе

если выложу 9 ему будет труднее сливы

лужу 50 то с подавляющими шансами он

повелит закономерность говорит о том что

мы одновременно можем воспринимать не

очень большое количество объектов от 5

до 9 как правило поэтому правило

кошелька

элера более известна как правило 7

плюс-минус 2

это правило очень очень больно нас бьет

когда мы пишем код по одной простой

причине потому что код пишутся масками а

читается целиком как это обычно бывает

садится разработчик пишет небольшой

метод в котором 78 объектов затем берет

какой-нибудь кусочек этого метода

добавляет туда еще пять затем переходит

в другое место пишет там еще 782 через

затем возвращается добавляет три затем

переходит в другую часть кода меняет там

два элемента опять возвращается меняет 5

у него как у художников каждый

конкретный момент времени не очень много

объектов фокусе внимания

а потом этот художник отходит на шаг

хоботом картина большая да с кодом

абсолютно та же самый человек весь день

писал писал писал писал писал а потом

хоп commit на полторы тысячи строчек и

вот этот вот commit всем лиду приходят а

земли то он не знает как этот код

писался ему нужно читать

уже не по три четыре пять объектов ему

нужно читать полторы тысячи объектов

у него первый вопрос это а где тут

вообще начала что это за к мите ли

именно и это является одной из

огромнейших проблем в разработке софта

что пишем мы его небольшими кусочками а

читаем весь сразу поэтому при неудачном

стечении обстоятельств даже собственный

код который мы сами написали вот этими

вот руками через полгода можно уже не

прочесть потому что весь контекст давно

из памяти выветрился а строчек то там

дофига и больше

ну не я это открыло собственно говоря

очень давно открыли назареи с этим

борется вот эту вот сложность которая

накапливается в коде за счет кошелька

миллера и его

раскладывают в разные места дабы

в каждом конкретном месте не было больше

9 элементов раскладывать можно во

множество разных мест тут как раз на

прошлом докладе я рассказывал как эту

сложность рубит топором по модулям по

файлам по зависимостям как использовать

встроенный в языки package manager

системы и как сделать так чтобы в каждом

конкретном месте не было взрыва мозга из

ста тысяч строчек кода а сегодня я

поговорю про то как эту сложность

раскладывать на

идентификаторы ибо у идентификаторов у

имен переменных функции даже классов

есть одно замечательное свойство

буквально вчера или позавчера обсуждение

в фейсбуке кстати франдетти со мной

фейсбуке и обсуждайте со мной всякие

разные технические вещь это очень клево

так вот вчера или позавчера меня

спросили а вот восприятие кодом вот это

правило 7 плюс-минус 2 как она относится

к функциональным языкам программирования

но там также или не так же

ну я сперва ответил что также да это

объекты все равно в день и но потом

подумал что меня наверно не совсем

проект спрашивали и ответил чуть

расширена что на самом деле понятие

объект

оно такое немножко размытое и она

зависит от огромные кучи факторов

например если я только учусь играть

шахматы и кладу перед собой шахматную

доску там на ней какие-то фигурки для

меня объекты фокусе внимания будут

отдельные фигурки

да мне будет очень трудно понять какая

куда ходит их там больше 9 будет очень

тяжело если я уже немного играю лет

десять-то для меня вся доска it на самом

деле будет один объект его буду

воспринимать целиком а объектами я буду

воспринимать такие вещи

как например стратегия угрозы чтобы

через пять ходов что через десять

развития партии вот с языками

программирования все абсолютно также в

зависимости от того какой у человека

опыт объектом у него может быть как один

идентификатор так и более сложной

конструкции например цикл

branching что-нибудь еще именно поэтому

более опытный программист

он лучше эффективнее пишет и читает код

там на самом деле магии никакой нету то

есть не то что программист через пять

лет получает некий такой волшебный опыт

который мы позволяет делать какую-то

магию нет в нее просто внутри нейросети

головного мозга выстраивается в

долговременной памяти некая антология

предметной области блин какими страшными

словами говорю в общем он запоминает

какие-то наработки и когда смотрят в код

он уже может оперировать более сложными

понять имен видит не переменную a cycle

видит не

функцию а декомпозицию и

идентификаторы идентификаторы тут очень

важны потому что вы дентифик отары можно

запихивать доп инфо абсолютно бесплатно

у нас даже начинающий программист всегда

воспринимает идентификатор как единое

целое да то есть мы конечно можем

назвать переменную 80 символов и тогда

наверное и будет тяжело прочесть да этот

индикатор будет содержать несколько

объектов

но как правило как правило из человек

умеет быстро читать то чтобы мы не

написали в идентификаторе это будет

рассматриваться как один объект в

кошельке миллера и

в этот объект можно запихнуть

дополнительную информацию которая

уменьшит нашу сложность и позволит

писать более простой и понятный код

какую информацию запихивать в

идентификаторы

но на самом деле как показывает опыт

лучше всего запихивать туда информацию

которая отвечает на вопрос vtf или

по-русски что это такое на самом деле

вот это не очень хороший момент моего

доклада потому что тут бы конечно надо

рассказать подробнее почему именно на

этот вопрос а не какой-нибудь другой

но боюсь это бы заняло ещё минут 20 и я

бы окончательно выжег вам мозги всякими

разными страшными словами давайте

посмотрим на код дата у меня большинство

докладов без кода я как чувствуешь

немножко странной все-таки программист и

так давайте посмотрим на этот код этот

код он реально простой очень очень

простой но даже у этого максимально

простого кода не все

идентификаторы одинаковые вот если мы

посмотрим например на идентификатор

из mvp то сразу понятно что это такое

это булевой флаг если он true то что то

mvp например пользователь потому что мы

там говорим о пользователям а если он

фолз то наверное ему не повезло и он не

mvp с идентификатором из mvp backgrounds

тоже в целом все прозрачно что это такое

еще один флаг если это тру the

background надо делать каким-то м в

пышном наверно conti красивая картинка

mvp этом острове был пирсинг

а если он фолз то опять же не повезло

какое-нибудь более простой background а

вот с идентификатором users у нас не

совсем понятно потому что если мы

подойдем в человеку на улице и спросе

watcha такой users to человек не сможет

сходу ответить даже если microsoft mvp

потому что ну ну да это пользователя а

какие-то пользователи это все

пользователи

это пользователи которые мы вот только

что из базы данных достали это администр

а трачу за пользователь это вообще что

этот код делает не совсем понятно

придется читать

а читать иногда приходится по сто тысяч

строчек поэтому все почему то говорят на

мужик ну считай код ну что икота за 15

лет я сталкивался проектором где база

кода 30 мегабайт его просто вот съесть

его не получится почитать там читай код

выглядит следующим образом загрузила

какой-нибудь и дэви пострашнее типы визу

studio

а дальше got a reference год reference

data de финишного дифферин fight l200

результатов году дефиниция gota de

финише на так два часа то есть о том

чтобы что-то читать там речи нет там кот

быстро быстро быстро быстро

просматривают чтобы хотя бы примерно

найти где чего лежит и очень хорошо

когда

идентификаторы говорят отвечают на

вопрос vtf что это такое посмотрите вот

простое переименование я взял

идентификатор и просто чуть-чуть туда

добавил слов до код сложнее не стал зато

сразу стало понятно что этот код делает

он оперирует исключительно

пользователями которые на данной

странице да если среди них есть хоть

одна его пешком и меняем background

если нету то не судьба вот этот простой

прием сразу делает код более читаемым

почему мы запихнули в идентификатор

больше информации чтобы он лучше отвечал

на вопрос что это как показывает

практика о коде у нас обычно есть два

вопроса два вопроса какие то вопросы это

вопросы что и зачем и очень хорошо когда

у нас идентификаторы отвечают на вопрос

что

а код целиком отвечает на вопрос зачем

потому что это позволяет вам быстро

разобраться чего происходит в коде и

внести соответствую

изменения это на самом деле очень и

очень круто

безусловно зачем это не только для кода

еще можно для имен функций ещё это можно

в комментарии выносить сообщение для

комментов там есть целая хитрая

машинерия которая позволяет писать более

понятный код

но я опять же не буду сегодня об этом

много рассказывать об этом уже

рассказывал есть видеозапись и вы можете

потом посмотреть слайды сходить на

youtube и прослушать еще час как я буду

рассказывать про то как написать код

который отвечает на вопрос зачем

сегодня я рассказываю про то как писать

код который отвечает на вопрос что

о том что код должен отвечать на вопрос

что тоже не я первый догадался об этом

догадались еще лет тридцать назад и в

microsoft и даже сделали замечательную

венгерскую нотацию а потом подумали

сделали 2 венгерских нотации

это была первая попытка писать код

который отвечает на вопрос что попытка

была ну ладно она была первая и потом я

как буддист

стараюсь не высказывать критическому

мнения мне не всегда получается но я

стараюсь

в общем ребята что делали они вы

дентифик отары запихивали тип вот он на

самом деле это была систем ху горин да

еще был abs фугори где они пытались

запихнуть назначения но идентификаторы

выглядели следующим образом вот это вот

лпс w z users это на самом деле

long pointer на unicode string

оканчивающиеся нулем вот я до сих пор

помню потому что 12 лет под винду писал

там вот все идентификаторы такие вмс

дании и в winapi

ребят из microsoft и которые это сделали

они на самом деле а исходили из лучших

побуждений они знали про то что каким бы

корявом еда

секатор не был это все равно один слот в

кошельке миллера зато если туда

запихнуть дополнительную информацию то

человеку не придется мучиться вот строка

это какая обычная или юникодная она

термини равана ноликом или нет тогда

программирование было низкоуровневая еще

было высокоуровневая версия обслуга риан

а где пытались запихнуть назначение но

получалось это не очень я был большим

фанатом венгерской нотации на протяжении

15 лет если посмотреть мой код на python

и которые я писал два года назад то

выглядел он примерно вот так я им сейчас

под свечу а вот эти вот небольшие

якорем да с подчёркивание л

подчёркивания подчеркиваний f и так

далее это как раз была моя версия

венгерская нотация которые я разработал

и которая позволяла ну не так страшно

как у майкрософта

а запихивать в код информацию о типе

например с подчеркивание означает что

данный не dirty секатор аргумент функции

типа строка

а подчеркивание в начале подчёркивание в

конце f означает что это поле класса для

внутреннего употребления да еще пулевого

типа а год назад я от венгерской нотации

отказался о чем пришел вам сегодня

рассказать за эти 15 лет

оказалось что запихивать в идентификатор

дополнительную информацию это клево а

вот запихивать у него информацию о типе

это бесполезно потому что информация о

типе она нам пользы несет не очень много

если мы не пишем драйвер на си то

информация о типе нам не то чтобы очень

полезно то есть конечно разницу между

списком пользователей и строкой с

разделенными запятыми пользователи минут

до она часто бывает полезно но на самом

деле реальную

пользу несет когда идентификатор

отвечает на вопрос что

и чем лучше он отвечает на вопрос что

это тем более простой и читаемый

получается код вот смотрите пример из

джанга

это вот реальный джунгарский код я его

не модифицировал он очень простой и если

мы потратим кто-то минуту кто-то 30

секунд я медленно читаю там пару минут

чтобы разобраться то можно сыну точно

сказать он делает чего не делает и так

далее но если у нас много кода и мы

читаем его быстро и нам нужно быстро

понять вот код это что-то не читая все

тело функций у нас сделать не получится

ну какой-то код что это за код это код

по которому фильтровать это код который

определяет поведение но какой-то код до

идентификатор он не то чтобы очень

говорящий

более того несмотря на этот

идентификатор вспоминается старый

анекдот про двух на воздушном шаре когда

не из тумана выплывают cоздание

огромному офисному

видят там какой-то человек сидит а нему

машут машут мужик мы где он открывает

окно долго на них смотрит вы на

воздушном шаре один о microsoft building

это разработчик

как догадался но в нашем на первых долго

думал во вторых дал абсолютно точно

корректные ответы в третьих этот ответ

нам абсолютно бесполезен

вот

такое название идентификатора но мне

очень напоминает этот анекдот потому что

это дать и секатор абсолютно точно

говорит что это код какой там может 4

может шестилапы но это знание нам не

поможет ни как нам все равно придется

его читать а если у нас 10 мегабайт

исходников то читать мысли

замучаемся до что можно сделать вот

смотрите мы применяем магию и чуть-чуть

переименовываем идентификатор хоп и

сразу все стало понятно пошито мы читаем

как английский язык с р р

вив coat да у нас сразу стало понятно

что это на самом деле код ошибки на

которую мы проверяем даже на самом деле

никакой не фильтр

а просто сужение данного предиката на

такие функции предикатами называются

которые что-то проверяют поэтому

основное правило при именовании

идентификаторов оно очень простое

надо называть идентификаторы как нам

нравится но чтобы при взгляде на этот

идентификатор не возникало вопросу что

это чтобы сразу было понятно что это и

зачем это есть так называть

идентификатор иногда получаются немножко

длинными там два слова три слова

иногда 5 но это уже конечно лучше не

делать для этого предусмотрены несколько

стандартов и таким кейс и с ней кейс в

коми кейси мы собственно говоря

склеиваем слова без пробелов стык меняя

регистров на кейсе мы используем

подчёркивание есть огромная битва между

разработчиками как именовать когда у нас

строчка кода выходит за 8 и символов она

практически гарантированно выходит за

кошелек миллер и там просто будет больше

объектов чем 9

поэтому когда тимлид говорит что ребята

давайте у нас строчки будут не длиннее

80 символов

он просто таким простым способом

фиксирует диаметр кошелька миллера

потому что ограничить 80

символами да еще и поставить пушку к на

это чтобы автоматически проявлял

проверялась гораздо проще чем каждому

программисту объяснить такой кошелек

миллера побороться с перспективным

когнитивным искажениям когда он будет

говорить мужики всегда об этом знал

через пять минут забывать на следующий

день будет повторяться проще сказать

ребята не пишите функцию длиннее крана

не пишите строчки длиннее 80 символов

поэтому в коде обычно использует камал

или паскаль кейс просто чтобы экономить

место строчки они туда не вылезали

очень хорошо с идентификаторами

использовать стандарт кодирования это

вообще хорошая практика при именовании

идентификаторов она просто замечательная

то есть когда мы собираемся перед

началом проекта

ну ладно начала проекты такое волшебное

время до когда мы можем выбрать новые

технологии начать все с чистого листа на

самом деле иллюзия проект tems по 20 лет

когда мы начинаем какую-то часть

сделайте наконец-то делаем стандарт

кодирование именно там мы можем написать

как мы подходим к именованию

идентификаторов где мы будем ставить

подчеркивание как мы будем определять

булевые флаги какие стандартные дате

секатор и используют если вся команда

говорит на одном языке в коде она к нему

привыкает эти общие подходы у них из

кратковременной памятью потихонечку

приползают в долговременную в результате

через некоторое время становится проще

читать код друг друга это безусловно

облака современные средства разработки

они код еще раскрашивают и делают hand и

при наведении мышки и многие коллеги мне

говорят гришь ну ты и есть какой-то

рассказываешь про идентификаторы да ну

зачем это всё ты

мышку novelty про него все рассказали и

не на самом деле правы но о наведении

мышки есть один фатальный недостаток она

не работает по взгляду на код когда мы

работаем с большой кодовой базы мы по

коду прыгаем быстро реально очень быстро

если мы на каждый идентификатор будем

наводить мышку то наша скорость работы

понизится там в 20 раз поэтому это

конечно очень ценное нужная и полезная

функция но не серебряная пуля

еще есть линдер и это статические

анализаторы кода вот как раз их

появление это была одной из серьезных

причин почему информация по типам нам

уже не так критична это раньше в хищном

коде спутал chars в чарты получил access

violation его высот потому что драйвер

только что накрылся сейчас когда мы

пишем код на python и на динамически

типизированным языком на самом деле если

инструментарий нормально подобрать не

очень боимся того что в список

неожиданно положим число потому что у

нас есть замечательные тузы и которые

сделают

винтовку нашего кода статическую

проверку и определят нам такие места

вообще до запуска этого кода ну и

безусловно некие небольшие элементы

венгерской нотации они очень полезны

например символ подчёркивание часто

используются для того чтобы в языках с

динамической типизацией и отсутствием

про его то

пометить какие поля являются приватными

и снаружи к ним доступа нет но тут тоже

есть нюансы вот например андрей

градиентов моя коллега который тоже

много лет был техническим евангелистом и

очень много лекций прочитал в luxoft и

он рассказывал что в одной крупной

компании очень крупной солидной компании

они с коллегами отказались от

подчёркивания для приватных

элементов потому что практика показала

что программисты видя подчёркивания

почему-то считают его индульгенции

из серии весь мусор добавляем

подчеркивание его может быть сколько

угодно начинают игнорировать кошелек

миллер и получается класс в котором три

публичных метода и еще 50 приватных

которые все с подчеркивания me

это конечно очень замечательно ребята

посовещались и решили что им проще

отказаться от подчеркиваний сказать что

ребята вот

пишете код так как будто все торчит

наружу и маньяк-убийца будет и объявить

ваш код и знает где вы живете чем

использовать подчеркивание ну и это было

проще чем объяснять всем и каждому что

такое кошелек миллера сработала кстати

качество кода повысилась то что одно

дело когда мы куда-то прячем 50

приватных методов а другое дело когда

они везде и в генерации справки наружу

торчат а как то уже и не спрячешь а это

в целом все что я сегодня хотел

рассказать о безусловно пронзить со мной

в фейсбуке пишите мне вопросы на email

ну я жду ваших вопросов

маленький вопрос переименования методов

и вот как и мелколистный кейсу а как же

в котором все это уже написано пеп

это очень и очень хорошо если команда

может себе позволить

использовать п безусловно используйте пп

но тут есть один важный нюанс

до об так же как любой стандарт это

стандарт по умолчанию важно понимать

зачем он был принят он был принят для

того чтобы те кто сомневается не знают

они могли использовать что-то готовое в

крупных компаниях как правило уже есть

свои стандарты кодирования которые

эволюционировали

там например 20 лет до компания

использует 15 языков программирования и

вот в такой компании если во всей

кодовой базе

нас 100 мегабайт кода на разных языках

используется kml кейс а тут неожиданно

начали писать напоит они говорят ну

ребята давайте следовать пеппа ну он же

есть это может быть не лучшим решением

потому что все программист уже привыкли

быстро читать камал кейс очень быстро

читать к мкс у них есть навыки им это

удобно а тут использовать п просто

потому что он есть ну конечно не надо

так делать вот поэтому паб это очень

хорошо если есть возможность мы его

используем но если в компании уже

многолетняя практика в стандарте

кодирование вовсе используют то имеет

смысл использовать стандарт кодирования

такой потому что как показывает практика

стандартная библиотека поэта

наименование идентификаторов не

придерживается пэп и примерно половина

библиотек который есть в этом сорте тоже

не придерживаются пеп поэтому если бы

придерживались пеппа все то я бы наверно

такого не сказал но учитывая что пеп он

присутствует только в 50 процентах

кодовой базе

то очень важно понимать начинать

с нуля или в компании уже есть

устоявшаяся традиция и ответил на вопрос

да пасибо еще два связанных вопроса

первый стандарт кодирование в компании

он должен быть

документирована как и как вообще с ним

лучше обходиться по вашему кто в твоем

вопросе на самом деле уже содержится

ответ он должен быть это главное что мы

хотим от стандарта кодирования а о нем

конечно же можно договориться устно

сожалению ретроспективное когнитивное

искажение это не единственное искажение

которое есть у нас в мозгах там только

такой популярный список из 50

а если почитать учебник социальной

психологии марс и за первый курс ты

понимаешь что их там просто наслоение

вот поэтому то что обговорили устно

будет понятый неправильно

обычно заводит вики и в вики заводят

стандарт кодирования все с ним знаком

ляются одна из обязанности тимлида он

смотрит на код если видит что кто-то

особо сильно уходит от стандарта

кодирования он интересуется вас а чё так

2 связанный вопрос и в серьезный вопрос

вот в докладе была куча примеров из

джанки

django получается не хороший пример

плане того как миновать переменные

django великолепный пример как именовать

переменные я просто дым шел небольшое

нашел небольшой изъян и

продемонстрировал что даже хороший код

можно сделать еще лучше на самом деле

готовит предыдущий доклад на эту тему

внимательно посмотрел на ход джанга и он

мне очень понравился но даже в хорошем

коде всегда можно сделать лучше спасибо

огромное в коллеги еще каверзные вопросы

у меня сразу в догонку появился а

смешение кремль кейс и snikers или

других других нотаций является ли злом

потому что у вас примере было смешение

там был сначала комок есть потом сникерс

там на самом деле давай-ка посмотрим

говоришь ли ты об этом примере

там до этого был про функцию с mvp

кажется из mvp и

но в данном случае в данном случае мы из

подчёркивание mvp

используем для указания того что это

собственно говоря аргумент вот мы часто

использует подчёркивание не для того

чтобы разделять слова а то чтобы

разделяете смысловую часть от какого-то

префикса например подчёркивание ставят в

начале чтобы показать что это про и вода

или в конце или делают например из

подчёркивания для того чтобы показать

что это булевой аргумент при смешении

обычно используют к мелко из для тушки

которые состоят из слов и добавляют

какие-то подчеркиванию чтобы эту тушку

раскрасить смысловые оттенки хотя это

тоже не очень чистый код но идеального

кода вы не бывает а еще вопросам прошу

вас

на горе

спасибо за доклад вопрос такой все-таки

насчет этих 80 символов я просто

сталкивался с ребятами которым 80

реально мало они говорят 120 у нас на

проекте и ну и проект нормально принципе

живет 120 у меня как-то

80 если писать нормальные смысловые

tante секатор и 80 я чуть не попадают в

спа кажется комфортным как считается все

таки это все просто конкретных проекту

нужно адаптировать

или все-таки есть смысл как-то вжиматься

в эти 80 сокращать идентификаторы

еще там делать я считаю что главное это

гармония безусловно 80 это не какое-то

волшебное число что вот 81 и все код

гарантированно сгниет также как правило

7 плюс минус 2 вот эти вот цифры от 5 до

9 это не значит что у каждого человека в

мозгу там ровно 9 каких-то каналов

обработки информации

если информации на единицу больше то все

не справляется нет это не так безусловно

80 это всего лишь некое исторически

взятое число потому что раньше текстовые

терминала помнить до 80 на 20 5 и так

далее которое в принципе в большинстве

кейсов как раз позволяет не делать

строчки слишком длинное вот если 100 ну

окей 100 вот 120 это уже в полтора раза

больше тут на самом деле очень простой

способ есть можно просто грепп нуть весь

код на предмет строчек которые длиннее

80 а дальше посмотреть сколько объектов

в этих строчках

содержатся если вы увидите что команда в

эти вот строчки по 120 символов

она не идентификатор и делает более

осмысленные

а делает там цепочку каких-то логических

операций кучу

вложенных сущности делает там какие-то

сложные list comprehension

и так далее то тут уже стоит задуматься

а мы вот хотим на пустом месте в коде

плодить сложность нам же потом его

поддерживать

потому что есть много простых способов

упростить кода

как говорят что вот если ограничить

длину строке 80 символами то мысли

программиста прекращает растекаться

вширь и начинает расти в глубь и на

самом деле код который был 120 символов

с которого какие части просто вынесли в

начало это простейшая декомпозиция у нас

одна длинная строчка становится тремя

там по три каждая это человеческому

разуму воспринимать уже гораздо

комфортнее же безусловно число это не

фиксированная надо смотреть посмотреть

очень просто грепп на ли посмотрели как

разработчики этим пользуются как раз у

меня перед глазами код который я пишу

последнюю уже нырнуть неделю-две и у

меня есть такая проблема у меня название

переменных их длина названия переменных

стремится к этим самым заветным 80

символом

вот и в связи с этим вот у меня вопрос

как мне правильно назвать следующую

переменную под у меня это должен быть

словарик который отображает айдишник

пользователя в некоторое время которые

соответствуют тому когда он последний

раз искал что-то на каком-то сайте при

этом это должно быть не обязательно

последняя служить предпоследний раз

предприят последний раз потому что эта

переменная функция которой вот эту

ситуацию обрабатывает нам последний

предпоследнее это великолепный вопрос я

очень рад что ты его задал вот а на

самом деле тут это критерий

если мы видим что при именовании

идентификатора при правильном хорошим

именование идентификатора у нас в него

почему-то не влазит совсем не влазит да

и это значит что пора перекладывать

сложность в другое место то есть вот наш

этот вот конкретный код

он либо нарушает правила сингл

responsibility principal до либо там

просто в одном месте собрано слишком

много и можно например в отдельный метод

вынести какой-нибудь часть

функциональностью дойди композицию с

помощью абстракций и уже в этом методе

идентификации будут названы попроще

потому что сам метод будет говорить что

происходит да или даже в объект вывести

какую-то функциональность тогда в нем

будет еще более просты идентификатор и

это на самом деле общий принцип когда мы

пишем код и видим что код становится

сложным это значит что пора переносить

сложность в другое место а дальше вы как

разработчик

на основании своего опыта языка

программирования того как приятно в

компании это место выбираете вы можете

вынести модуль разбить файл использовать

dsl переложить в идентификаторы в

абстракции путем наследования или

композиции можете добавить комментарий

можете вынести в документацию там есть

очень много способов

вот я ответил на ваш вопрос нет я

балерине sti в другое место и назвать

проще да вот я боюсь чтобы вот здесь в

вот сюда то и стала зашита вся сложность

значит перевести вот вот вот есть

вопросам сложный и сейчас значит вот ты

перенес всю сложность

вот-вот-вот-вот фразу да да куда то

перенести эту сложному вы

разработка программного обеспечения к

сожалению пока еще не просто яма как

алхимики мы играемся с какими вот

непонятными пинками они как-то

взаимодействуют правил еще никаких нет

как делать правильно не знает никто

смотрите автомобилестроение в первые 30

лет там реально делали такие автомобиля

что вообще непонятно чем они думали да

это сейчас мы видим все автомобили

одинаково автомобилестроения такая

устоявшаяся индустрия сто лет прошло вот

я думаю через сто лет разработка

программного обеспечения у нас будет

такая соответственно хорошая

замечательная профессия but учебники

будут без принципов будут инженеры

которые будут обучаться чего-то делать

сейчас мы алхимики мы экспериментируем

выбираем лучший способ проводим научные

исследования пытаемся понять как это

вообще сделать правильно и где тут даже

вопрос не в том куда ставить руль тут

вопрос сложнее чем управлять автомобилем

то есть у нас сейчас реально идет битва

между рулем рычагами там педалями

и крыльями вот у нас примерно так все

происходит

коллеги прошел понятно спасибо большое

еще одно маленькое значение в конце еще

одна проблема состоит в том что основное

о чем не надо думать это все-таки там

математика функции туда-сюда что-то

общее с осложнением вот всем спасибо

большое

там было строчка про замечательная

переменная типа языка и как можно более

широко прокомментировать да конечно на

самом деле есть исключение из правила

именования

то есть в большинстве случаев мы конечно

стараемся миновать словами но

но тут нужно понимать что когда

разработчик какой-то идентификатор

встречает много много сотен раз и у

этого идентификатора есть строго одно

назначение как например идентификатора а

и как индекса при итерации да и все

программисты об этом знают то мы можем

использовать этот сверх простой

идентификатор главное чтобы стандарте

кодирование у нас было указано что вот

стандартный идентификатор ой это

собственно говоря идентификатор итерации

цикла от 0 до

и тогда разработчикам будет чуть проще

читать и писать этот код во первых

просто набирать на клавиатуре меньше и

во-вторых новый год становится более

компактным но о таких вещах

обязательно надо договариваться потому

что если ребята начнут

экономить на жать на клавиатуру и

вставляется л м н в качестве

идентификаторов каких то же осмысленных

коду наступит звездец спасибо коллегам

прошу вас

собственно мы разговаривали

именование идентификаторов что в

принципе как бы ну это логично у меня

вопрос тоже касательной сложности но не

совсем идентификаторов мы поговорили о

распространении кода в ширину

а кот в глубину насколько глубоко

насколько большим может быть метод

насколько большим должна быть ну по

количеству строк кода так чтобы он еще

воспринимался как целостный объект

его действительно можно было еще

осознать полностью весь как как целый

метод они как такая здоровая портянка

которая делает тысяч вещей кошелек

миллера от 5 до 9 тут важно учитывать

что если у нас программиста и

более-менее квалифицированные то у них

объект это будет ни какой то

идентификатор а более большие

конструкции то есть если человек к

примеру пять лет пишет на тайтоне и он

увидит list comprehension да то для него

list comprehension это будет не 9

каких-то идентификаторов которые все

взорвали мы кошелек миллер и надо

останавливаться и понимать он сразу

поймет что эта интераций а там будет два

объекта у него вот это вот list

comprehension целиком и где-то у него

внутри вот элемент там по которому мы

интегрируем сечи мы с ним делаем опять

же если мы смотрим на метод дату

например какой нибудь там цикл

достаточно большое большинство

программистов будут воспринимать как

один объект да там какие-то методы тоже

как один объект

хорошо работающий эмпирическое правило

не длиннее экрана но это опять же надо

смотреть зависимости от языка

программирования тушь на той же джаве

писать не длиннее экрана но это смешно

там позднее связывание через анонимные

классы ход 9 строчек каждый минимум вот

экран

это такое хорошее правило которому

просто следовать ну и опять же надо

помнить что в глубь она к сожалению тоже

подвержены кошельку миллера есть очень

неприятная шутка которая правда что все

архитектурные проблемы

можно решить видениями дополнительного

слой абстракции кроме проблемы слишком

большого количества слоев абстракция

это к сожалению шутка про кошелёк миллер

и и она правда то есть мы можем делить

делить делить делить но когда у нас

глубина разделение становится больше

девяти значительно то этот код состоящий

из очень простых кусочков количестве

миллиона штук

будет иметь сложность просто из-за этой

цепочке из-за ее длины потому что если у

нас например взрывается java-приложение

мы смотрим на stack trace

там иногда бывает 150 элементов бывает

200 и несмотря на то что каждый элемент

это будет очень простой класс

несколькими методами несколько строчек

кода в сумме вот это вот цепочка делает

код нечитаемый абсолютно так что к

сожалению глубину тоже приходится

отслеживать но никто не говорил что

будет легко

вот коллеги давайте еще один вопросик и

перерыв последний вопрос есть еще

финальной такий это уже я сейчас рекорд

поставлю же 54 минута было 56

вот я задумался этой шутки про слои

абстракции подумал что наверное это

значит что сложность программ которые мы

можем написать в принципе ограничено я

считал 7 в седьмой степени это какое-то

бесконечное число на на самом деле очень

огромная так что несмотря на то что

теоретически она ограничена дано тут

есть нюанс у нас сложность каждой

программы ограничено но мы же можем

делить и программы вот сейчас например

новые вене это архитектуры микро

сервисов у нас уже программ и общаются

друг с другом и как оказалось это очень

клево вот так что в ближайшее время нам

хватит запасец там есть

спасли бы все коллеги

всем вам огромное спасибо

