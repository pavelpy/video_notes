доклад называется integra

позиции это

и права

это больше прав

лосось о том какие подходы использовать

у меня к вам пара вопросов кто хотел бы

закончить в 10 часов вечера

понятно можем посидеть подольше

тогда второй вопрос кто из вас

программируют каждый день по 8 часов

кто не программирует и не пишет тест для

вас ребят наверно будет не очень это

интересно но вы всегда можете обратиться

за разъяснениями значит первое

disclaimer у вас может быть разные точки

зрения на то что я рассказываю это все

здорово интересно я призываю вас

придержать мнение немножко при себе если

она действительно очень интересно и

задавайте вопрос или подойдите ко мне

попозже потому что две минуты трепа

умножить на 30 человек в аудитории это

один час человеческого времени давайте

друг друга уважать эпиграф для этого

доклада что такое software development

вместо software для вилок нато может

поставить или все любое дело любое

занятие это цитата из робота персика что

можем ли мы считать это тяжелым но

только не в том случае если тебя есть

какой-то правильный подход и ты уже

что-то умеешь делать а вот сделать этот

правильный подход вот это сложно

ожидании к аудитории я полагаю что вы

пишете программный код я полагаю что у

вас был опыт

обслуживание продукта который был

написан какими-то другими людьми может

быть вас какие-то шишечки и вы верите

что можно сделать лучше немножечко

терминов которые будут использоваться

здесь когда я говорю интеграции я не

имею ввиду continues in the гришин когда

я говорю два опытная имею ввиду создания

модификацию и фиксе не багов программ

обеспечения когда говорю support я имею

ввиду мертвый проект который не

разрабатывается только оперируется

обновляется конфигураций обновляются

пакеты и баг фиксинг никуда от нее не

деться и так основной вопрос почему

программная система растет ну вот из

разряда больше строчек возникает больше

различных модулей

ваш какие-нибудь идеи на эту тему

кто-нибудь там от бизнеса от

технического директора

директората окей окей да здесь ничего

нового в основном что у нас есть уже

какая-то программа какой-то нашим bp

шичко он делает отлично какую-нибудь

работу например яйца несет

а теперь мы хотим сделать чтобы новые

трюки эту программу выполняя например

золотые яйца несла

и тоже казалось то же самое да или у нас

есть уже имеющиеся программа называется

петух и и предоставляет microsoft

например нам надо сделать что наша

программа стала совместима с петухом или

допустим hadoop другая программа там

тоже надо сделать так чтобы врагам это

требование да еще иногда команда проекта

растет и мы просто копируем вставляем и

пишем намного больше кода почему я

считаю что это основная как-то такой

неуправляемый роста эта проблема что

очень часто бывает так что наша

программная система не готова к тому

чтобы какие-то новые изменения принять

что их как-то можно в нее внести

за разумное время а также что часто в

команда либо вообще не имеет

представление как это сделать ну вот

золотые яйца

значит нам надо значит бидон краски

золотой значит авто какой-нибудь 3d

принтер который это будет что-нибудь

делать а кто-то считает что надо может

например кормить курит золотыми я это

зернами тогда яйца будут золотые и

это имеется ввиду про техническое

видение единственный о том какие части

системы должна меняться очень часто если

технического видения нет то у двух

совершенно случайно выбранных инженеров

могут быть совершенно разные точки

зрения на тему как решить эту

техническую задачу и третье

до нас нет времени объяснять принят

привет дани его к нему маму если у нас

фичи фичи фичи нам некогда писать или

факторинг и что-то делать бизнесу как

правило нужно срочно

почему бизнес не хочет думать ему надо

срочно именно вчера

а вы тут сидите и зарплат получаете

неплохую

и здесь возникает понятие

там ведь знает про это слово что такое

впервые слышен на дядька боб

подсказывает что программной архитектуры

это такие практике методы которые

позволяют вносить изменения в поведении

программы казалось бы просто но как бы

это сделать до представил селия меня

зовут иван я программирую за еду а делаю

кадре view за еду и учу людей питону за

идут если у вас есть еда и вам нужно

что-то из этого обратитесь ко мне найдем

еще язык на одном из занятий с небольшой

группой по питону мы разбирали задачку

простенькую

и я понаблюдал за учениками который

имеет не так много опыта в использовании

разных примитивов но их уже научили

каким-то конструкциям и они идут по

задаче им кажется все достаточно просто

и все делается задача свойств потому что

есть строка нужно вернуть

трансформирован ую строку за всего лишь

двумя трансформациями первое нужно

заменить все большие буквы на маленькие

и наоборот маленькие на большие и второе

нужно поменять порядок слов на

противоположный казалось бы достаточно

простая задача давайте немножко

разберемся я сейчас надеваю шапочку не

очень опытного программиста и буду

кнопочки клацать то вы мне будете может

быть комментировать значит я пишу

функцию которая не делать ничего просто

возвращает пустую строчку окей что нам

дальше надо сделать ну например привести

все буквы которые ему пройтись по всем

буквам в этой строке

проверить если буква маленькая то

заменить ее на большую строку а если

буква больших а я-то заменить ее на

маленькую букву а еще мы наверное должны

использовать не

алфавитный символов то есть там будут

пробелы какие-то запятые и так далее их

нужно оставить как есть что еще дальше

теперь мы должны разбить эту строку по

пробелам чтобы понять какие есть у нас

слова

потом мы это развернем обратным самым

простым способом которым не есть просто

слайс с минус первым из вяжем строчку

вместе здорово казалось бы что здесь не

так ну давайте например протестируем в

этой задаче был один простой тестовый

пример что вот экзампла input должен

превратиться в input экземпляр написал

простенький обертку которая запускает

док тест который проверит что функция

работает верно нет функция работает

неверно кто может ответить почему мы вот

как как и не опытный программист где то

пол минуты по втыкаем зло stack trace

который нам упал

эту эта догадка это не не гипотезах как

я буду проверить пробел в конце где

если вы хорошо мы как начинаешь

программист ничего не поняли мы идем

смотрим на программный код

продам

куколка

гипотезы нет

году

то есть у нас потратилась одна минута на

60 человек всегда считайте

ошибочку ошибочка было сделано вот

первый слайд вот второй здесь уже было

ошибочка что я хочу здесь сказать когда

я задавал

программисту вот на этом этапе вопрос

может давать протестируем ответ был

такой что то что тут все просто пошли

дальше и мы начали разбивать строку на

слова разворачивать я вас

конкатенировать и в итоге мы получили

ошибку то есть функция работы не так как

надо при том что ошибка была заложена ну

на самом первом этапе

кто считает что это очень сложный кейс и

любой из вас мог бы здесь ошибиться кто

считает что человек который это написал

слишком туп человек не глупее меня я

понаблюдал за этим просто у меня есть

опыт работы с питоном я что-то вижу и

могу читать стектрейсы

я заметил что у меня есть такая же тяга

переходить к следующему шагу побыстрее

как сделал этот товарищ чуть чуть более

интересный пример

по можем ли мы это сделать лучше да мы

можем разбить задачу на задача была как

сделать где модификации строки

заменить буквы большие на маленькие

маленькие на большие и поменять порядок

слов важно ли в каком порядке эти

модификации были сделаны там было 12

вообще говоря так как то влиять друг на

наделах метод не влиятельных дело я хочу

создать функцию которая будет выполнять

одно действие менять регистру всех букв

в строке кто знает как это сделать

стандартной библиотекой

у любого стр есть метод с вич кейс так и

называется то есть возвращать ту же

самую строку с измененными

регистрами на что хочу обратить внимание

неважно как эту функцию описал

я ее протестировал я записал записал

простым док тестом самый простой

вариантом применение этой функции и могу

в любой момент проверить что она

проходит

я на нее опираюсь дальше использую

протестированные функцию таким же

образом я могу проверить функцию которая

возвращает слова в обратном порядке как

вы видите 1 цифра сцепка происходит по

пробелу и знаки пунктуации остаются ну и

черт с ним так было заказанных бизнес

требованиях а вот птица непосредственно

street она сварных который себя

представляет лишь комбинацию двух

функций одна за другой именно это я имею

в виду под словом комбинация в заголовке

этого доклада

читаю ли я что это хорошо безумно

теперь перейдем чуть более сложную

примеру здесь будут показываться кусочки

кода

3 вопрос который я хотел бы чтобы вы

задавали и можете там отвечать да да нет

да

или чувствует как мы сможем построить

unit-тест для кусочка кода который будет

на экране как мы можем построить

интеграционный тест насколько сложно

будет построить unit-тест насколько

осторожно будет построить интеграционный

тест и как сделать функциональный тест

кто-нибудь знает чем разница кто не

знает в чем разница

хорошо unit-тест это то что вызывает

вашу функцию проверяет результаты ее

работы при этом все остальные части

системы не нужны функциональный тест это

тот который поднимает ваш веб сервер

отправляет в него запрос проверяет что

было записано в базу данных и какой

ответ вернулся то есть фактически на

живом приложение

интеграционные тесты это несколько

частей системы соединенные вместе

обмазанный с других сторон

заглушками проверяются что они друг

друга правильно взаимодействуют

интеграция их связка работает правильно

что я хочу сказать что есть вот бизнес

требование мы хотим чтобы доступ к

нашему приложению получались только

зарегистрированные пользователи

хорошо в программист пишет функцию логин

которая принимает юзернейм и пароль и

функция логин создает объект blackbox

которому будет задавать вопросы это в

сторонний сервис отвечающий за

авторизацию и

стороннем сервисе нужно знать только

просто по какому углу туда стучаться

проверяется и если пользователь не

валидный не плане валидный пароль не

валидный имя юзера юзера будет возникала

ошибка в противном случае будет

вращаться user

как написать унитаз на эту функцию

сколько понадобится как-нибудь заглушек

или еще что-нибудь ладно а просто сложно

или очень слаженно

словно

почему сложно почему провал

никакой логике это то есть возьмем

хорошо я хочу сказать что все что этой

функции нужно это вот это вот

урла которая может быть какой-нибудь

пустой или тестовой и дальше просто

проверить что библиотека им окна

библиотеки request который проверит что

вопрос пошел в тестовый

как правильно до конца не ясно я

объяснил что объект был бокс делать

взаимодействие со сторонним сервисом

скорее всего похоть и т.п.

я считаю что здесь нужен один мог и один

тест в значения тестовый урок просто

заменить ну еще еще один мог видеть

будет и дальше проверить что при ответе

от черного ящика 200 ok

пользователь возвращается при ответе

adblock бокса какой-нибудь там

пользователь неверный или неверный

пароль возвращается ошибочка теперь

пришло новое бизнес требования мы хотим

чтобы доступ с мобильных устройств на

наше приложение имели только те

пользователи которые заплатили и

программист

посмотрел ну просто у нас есть функция

логин может быть это был тот же самый

программист но скорее всего разные люди

и добавляют в кусок проверки которые

отвечают что если там где-то в user

агенте было словом мобайл то скорее

всего это мобильная опера или мобильный

какой-нибудь сафари и вот мы будем

проверять еще один дополнительный

сторонний сервис который отвечает за

счет какие пользователи заплатили какие

нет каких-то инвалидная подписка на наши

услуги у кого нет и случай если

пользователь оплаченный то мы пропускаем

дальше и возвращаем пользовать случае

если нет то мы бросаем exception просто

или сложно здесь написать unit-тест

давай что такое request

да прошу прощения я подразумеваю что это

из библиотеки iv ласк

глобальный объект который отвечает за

текущий контекст

в запросах это т.п. запроса который

пришел на веб-сервер и у этого объекта

request есть поля user-agent это

значение заголовка user-agent этот

обрезок запросе и это можно обращаться к

нему как строке и проверка что user

агенте будет под строка

ответил

назад

[музыка]

плоско есть тестовый клиент который

поднимает тестовое но и понять свою идею

до мы должны будем создавать или мог им

обмазать этот request

или поднимать то что ты говоришь

поднимать тестовое приложение это все

таки это можно назвать унитаз очень

может быть я сейчас не хочу вдаваться в

подробности фласка хоть и так хотела

избавиться на вопросы возникают еще раз

просто или сложно

unit-тест сложнее почему потому что

больше движущихся частей до

интеграционные тесты составить проще или

сложнее

хорошо на прошлый вопрос на прошлой

кусочек кода мы про интеграционные тасс

не говорили то есть что здесь может

сделать что там какая-то часть системы

взаимодействовать куда-то там black box

вот это ходит может я уже вас путают

если щенок справляем то почему здесь

нельзя

рацион это если мы не можем windows если

мы эту пригласил

вопросы терминологии

если мы макаем blackbox проверяем да

наверное наверное и unitas будет если

blackbox никак не меняется кроме как

меняется адрес url в переменной среды

окружений я думаю

или у нас должен быть тестовый экземпляр

будет бокса

который специально обучен так чтобы

никуда не ходить а только записывать как

он как к нему обращались что в общем-то

аналогично аналогично муку хорошо я хочу

сказать что в данном случае сложность

тестирования вырастает и чаще всего это

решают тем что

к имеющимся интеграционным тестом

добавляет еще один мог и просто они

обрастают пачкой декораторов которые

будут проверять что система должна

находиться в полной изоляции фактически

пришло новое

бизнес требование теперь мы хотим чтобы

там попытки мошенничества пресекались

как можно раньше и для этого у нас

возникает на пользователи там какой-то

фактор его

недоброжелательности из разряда по

какому и печник он пришел и так далее

если он больше какого-то определенного

порога мы должны отправлять человека на

captcha

разряда проверять жив он или не жив я

хочу сказать что чем больше работы

взаимодействие с разными сервисами

добавляем внутрь одной функции тем

сложнее она становится тем сложнее и

тестировать и как следствие того что я

рассказывал сюда засадить бак намного

проще несмотря на то что кажется что

внукам простые гардины и быстрые выходы

еще у меня был point какой обратите

внимание что функция называется логин а

делает три разных действия мы тоже

запашок небольшой

и есть такой интересный термин

называется open driven development

его впервые в моем присутствии упомянул

макси пеленой бывший коллега это когда у

нас есть одна большая функция мы просто

в конец я добавляем

еще новые блоки потому что у нас уже

открыт connection к базе и мы там просто

теперь в базе выберем еще остановить

привет макс где бы ты не был подведем

небольшой итог

ящики я вот это называю интеграции когда

у нас есть какие-то часть системы и мы

прямо внутри в кишках своих своей

системой

ходим в другую сторону это смещение

сингла responsibility принципа как это

по-русски спасибо ребята приятно по

говорится в розово ный начитанные аудита

и

[музыка]

это сложнее в тестировании и как

следствие нам много больше ошибок может

возникнуть интеграционные тесты при этом

становится единственный единственным

инструментом тестирования и они

становятся очень сложные и хрупкие

поскольку по мере того как систем

меняется нужно менять адреса мог of что

где делается и я считаю что это

увеличивает стоимость разработки или

поддержки

если вы считаете иначе мы можем

побеседовать чуть позже теперь я хотел

бы показать ничего особенно интересно

достаточно скучный кусочек кода у нас

есть отдельная функция которая делает

логин проверяет username и password

в сервисе другая функция которая

проверяет блокируют запрос если

пользователь пришел с если пользователь

пришел без подписки оплаченный третья

функция которая redirected пользователя

на captcha

если у него фрод фактор выше какого-то

трэз холода

можно еще вынести куда-то в контекст но

я пока то есть в переменную или в

конфигурацию пока вы не с параметром

достаточно просто 5 5 линий

функция и в конечном счете

имеется одна функция композиция которая

делает со шаг за шагом и достаточно

декларативно я считаю что декларативно

видно что она делает и какие результаты

каждый на каждом шагу

ну и соответственно если все прошло

хорошо она отвечает привет это tab a200

доступна ли то что я рассказываю спасибо

да в случае с композицией

это подход который позволяет нам

создавать новую фичу или новую

модификацию программ обеспечения как

новую программу нет не обязательно

говорить про микро сервис отдельно

запущенный но новую функцию новую

сущность который может быть отдельно

протестирована отдельно интегрированных

не только с этим нашим потребителям но и

с другими функциональные тесты обычно

все равно нужны для того чтобы поднять

живой

кластер или там живое приложение и

прогнать проверить что она базу данных

делается но намного больше создана unit

тестов обычно которые ускоряют

разработку поскольку покрывают большую

часть вопросов к программному продукту и

в качестве минуса

системы вносятся больше in direction это

как знаете есть такое высказывание искал

в интернете на не нашел что любую

проблему можно решить введением еще

одного уровня абстракции

кроме проблемы слишком большого

количества уровней абстракции нашему

пользователю программисту нужно знать

все эти маленькие функции и как-то их

читать я считаю благодаря тому что

функции крайне маленькие они помещаются

в одну голову вот так вот с приложить то

и после первого-второго раза человек

начнет ориентироваться в ней и может

увидеть декоративный код и на уровне

чуть повыше чем питания чей дик ты или

строчки будет работать системой вот на

этом в принципе все для дальнейшего

чтения и смотрения 1 книжечкой один

видосик который я уже показывал наверно

можно ворваться на этом все до спасибо

что вы делаете с исключениями что мы

делаем

инвестируем но я понял вот у вас есть

задача композиции и как получается любой

вышележащей уровень отлавливает

исключения более нижележащего уровня

транслирует их в исключении своего

уровня и пробрасывать выше

как это проходит нет но вот у вас есть

репозитория которая с базой общается он

там integra террор уронил кто его в

итоге отловит как это протестировать

парень примерно пример вот этот парень

управляющая функция в данном в данном

примере я думал про фласку поскольку

извините последнее время работаю с

ласкам возникшая

ошибка не обработанная будет превращена

в ошибка определенного типа вот например

конфликт это будет 412

по-моему отступать 412 будет

преобразован в ответ сервера и средних

это добавить 412

извини хоть этапа 401 как с ними

работать

вот эта функция тестируется что при

определенных условиях она бросает это

исключение

от исключения дальше обработает

обработает его фласка где после этой

функции если мы хотим исключение наша

собственная в этой функции запереть то

здесь наверное должен быть трой accept

какой это какая-то логика обработки я

ответил на вопрос

ну да всем спасибо

спасибо за доклад я хотел немного

дополнить о том что эта проблема очень

сейчас явные востребованная и очень

хорошие и стресс можно увидеть в dota

садимся есть посмотреть на канал ну как

плохой пример но если посмотреть на

ковер и зайти в репозитории им

победителей то можно увидеть очень

красивую картину когда у вас куча файлов

и это просто просто не

или это просто функции которые в

принципе являются простынями если данным

вот в данном ситуацию данном контексте

это еще можно как-то словить

тестами то там не очень понятно даже как

тестировать данные например аналитику

обучения модели и так далее и

интересно даже посмотреть на терре по

истории в плане того как они ризы

развивались со временем потому что

сначала люди начали писать просто просто

ней и дублировать их файл и потом

некоторые более умные люди поняли что

как бы это не очень хорошо подход и они

начали писать много мелких функцией одну

функцию которая вот просто вызывало по

очереди все мелкие функции потом

возвращала результат а потом кто-то еще

более умный и взял убрал одну функцию

записи о как вход другой функции а потом

еще более умные

взять и создать дойти до это pipelines

вот а потом это ещё оказалось что можно

масштабировать с помощью различных

streaming платформа так далее и в общем

и так они это проблема на самом деле

является более масштабным есть

посмотреть вот вот это саян станут прям

все очень больно мне кажется на данный

момент хорошо спасибо за замечание

это да я понимаю о чём ты хотел бы

только сказать что это там про этот

вопрос написано много книжек и уже 80-х

годах они были достаточно хорошо

известно о том что проблема публикации

программного кода это сама вообщето

главная проблема я хотел бы только

сказать что не надо мешать

как бы котлеты с

там чем-нибудь другим потому что есть

олимпиадные программирование у него есть

шин конкретной задачи и цикл жизни

олимпиадные программу или вот программы

как это не больше одной недели до

олимпиадная программ в моем сзади они

уже не нужны потому что ты либо попал ли

монет а есть программирование для того

чтобы ты завтра придешь и попытался как

с этим сообразить хуже того завтра

придет твой начальник и он будет делать

ревью потому что пока ты будешь спать

мафия проснётся и будет делает кудри бью

мы на проверке цинизма

с фальсификацией операционные

интересный у нас не часто перемешано в

некоторых случаях где мыслей пускай но

на жадности функциональная мы стараемся

для делала

вопрос терминологии я понимаю не не

столько проверить сколько написал а

гораздо важнее через под воду

интересный к примеси он и потому что

контроль над леса на душе просто набор

коробок

рига если до этого в течение полугода ни

разу не падала вдруг упала может быть ты

что-то изменил спасибо вопросы ещё

вопросы у матросов нет вопрос вопросов

спасибо за пасибо большое

[аплодисменты]

