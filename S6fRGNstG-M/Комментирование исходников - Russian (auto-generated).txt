спасибо коллеги спасибо я на самом деле

очень рад вас всех здесь видеть вот я

вас горячо приветствую также приветствую

тех кто смотрит нас в прямой трансляции

ну и конечно же тех кто смотрит нас в

записи такое послание в будущее вот

коллеги буквально секундочку

уважаемые коллеги которые смотрят мне

сейчас запись а в конце доклада будет

мой e-mail

тема которые раскрывают а тема

комментирования она очень flame

образующие

и я безусловно не смог все а те из вас у

которого будет свое мнение по поводу

озвучиваем материалы буду просто

счастлив если вы мне его на пишитесь как

то свяжитесь со мной и мы подискутируем

потому что я сам пока знаю не все и буду

рад любым собственно говоря дополнение и

так коллеги

чем я к вам сегодня пришел я к вам

сегодня пришел с а кошельками и

чудовищами это серия моих докладов про

то как писать софт вообще

и сегодня я постараюсь поделиться своим

небольшим опытом которые собрал по

поводу комментирования исходных кодов

как комментариям писать и как

комментарии не писать комментирование

исходных кодов это чудовищно flame

образующие тема

разработчики разделяются на кучу лагерей

постоянно вспыхивают холивары вот есть

методологии как правильно писать

комментарии методологии как комментарии

не писать а некоторые разработчики таких

достаточно много считают что комментарии

не нужны вообще не только все портят

и лучшим комментарием является сам con

moto таких разработчиков является читай

кот дальше идет много-много нецензурщины

а другие разработчики наоборот считают

что он комментарий это очень важно и

полезно не содержит метод информацию

которую нельзя запихнуть в сам код и код

с комментариями гораздо

лучше чем кот без комментариев но

безусловно есть группа неуверенных

разработчиков которые считают что

имеется некая золотая середина часть

комментариев нужно запихивать в код

часть комментариев нужно вносить в

комментария часть комментариев над

вообще страшно сказать в документацию

выносить вот поэтому прежде чем резать

правду-матку да я бы хотел попытаться

прийти к некому пониманию а нафига

комментарии вообще нужны для этого я бы

хотел вас познакомить с этой милой

зверушками к сожалению фотографии самой

зверушки я не нашел поэтому я взял

фотографию другой зверушки это голод из

божественной комедии данте алигьери

а зверушку про которую я говорю я это

complexity проблем проблема сложности

это то с чем борются все программисты и

благодаря именно этой зверушке вот и это

это это и вон той ее части а 70

процентов программных проектов которые

мы делаем с треском проваливаются а что

такое complexity проблем complexity

проблем проблемы сложности это то с чем

сталкивается любой разработчик когда он

хочет поменять код то есть мы садимся

мой кот пишем пишем пишем у нас хорошо у

нас проект развивается у нас все

замечательно в какой-то момент месяца

через три

нам нужно вернуться к части нашего

проекты что там добавить убрать поменять

изменить и тут мы неожиданно понимаем

что мы на самом деле не очень хорошо

помним как эта часть устроено и нам

трудно вносить изменения и чем больше

наш проект

а тем собственно говоря чаще у нас

случаются такие проблемы и чем больше

голов у по стилю complexity проблем

эпические проекты типа windows photoshop

1с имеют настолько чудовищного размера

complexity проблем бегающие рядом с ними

что введение нового разработчиков курс

дела занимают месяце а для внесения

каких то изменений требуются аксакалы

которые доподлинно знают свою часть

проекта без такого человека не просто не

могут внести необходимые изменения вот

что мы знаем о complexity проблем но

самые простые вещи чем больше код тем

она собственно говоря толще дано хеллоу

ворлд в десять строчек кода комплекте

проблем не имеет по определению а самый

лучший код которого 100 мегабайт

имеет достаточно большую complexity

проблем как бы хорошо этот код написан

не был есть некие характерные признаки

которые определяют диаметр complexity

проблем количество голов так сказать

размах крыла прочие характеристики

а это безусловно костыли и технически

долг тем больше технического долгом и в

проекте оставляем и чем больше там

костылей

тем complexity проблем страшнее вот чем

неприятно данная зверушка кроме внешнего

вида

когда мы возвращаемся к нашему проекту к

его кусочку через например год до через

год мы хотим сделать так чтобы наш

магазин например вам там

одном из экранов делал превью фотографий

ну примеру там

анимированными да мы открываем наш

исходники их 10 мегабайт в начале мы три

часа ищем данный раздел ну потому что не

помним а потом мы находим этот раздел

понимаем что у нас абстрактный фабрики у

нас там какие-то визита у нас там

шаблонизатор спереди у нас клей сзади

backend и вообще там как-то всего много

вот мы на это смотрим и понимаем

вот поменять то конечно мелочь но как то

вот у нас в исходниках много всего и

тривиальные изменения затягиваются на

очень-очень большой срок вот поэтому

часто мы туда вставляем касты

до костыль позволяет нам решить задачи

очень быстро но добавляет complexity

проблем еще одну голову до когда в

комплекте проблем 2000 голов то новый

разработчик первые три месяца на проекте

но в целом делать ему особенно нечего

сами понимаете вот в чем же природы

комплекте проблем почему такое

получается что вот мы копаем канавы и

все хорошо докопается такой прямой вот

лопаты все от забора и до обеда когда бы

код начинаем писать там вылезают

какие-то твари начинает гнить терять

поддерживаем асти вообще кучу каких-то

юридических проблем на мой

профессиональный взгляд это получается

почему потому что год а сама по себе

информация

это на самом деле много информации и это

очень очень много информации 10 мегабайт

не проект ну там миллионы строчек кода и

когда мы пытаемся всей этой информации

разобраться мы в нее немножко тонем

поэтому для того чтобы с кодом с большим

кодом с очень большим ходом как-то

работать нам надо что то делать ну вот

профессиональные разработчики говорят

что надо писать код хорошо да многие это

говорят но я стараюсь

как-то разбить такие общие заявления на

конкретные широкину значит хорошо да вот

конкретно что писать вот в моем докладе

будет много общих утверждений мало

комментариев

учитесь и к этому надо кого-то

комментариев комментариев будет мало вот

на мой взгляд для того чтобы кот

сохранял поддерживалась в нем надо

расставлять маячки такие подсказки

которые для компилятора будут абсолютно

бесполезное зато для программиста

которые через три месяца к этому коду

придет они ему скажут что вот тут вот

кабель лежит вот тут копать тут не

копать вот тут у нас самосвал проезжает

и так далее такие маячки расставлены в

коде они нам сделал полезным это

дополнительная информация для компьютера

бесполезная для разработчика очень

полезно а маячки можно расставлять

разными способами я знаю больше десятка

вот но есть основные такие хорошие

способы установки маяков таких хорошего

годных маяков вот прежде всего можно сам

код модифицировать таким образом чтобы

он кроме компиляторы еще что-то человеку

рассказывал до говорящие имена

переменных методов хорошие константы и

декомпозиции функций и так далее много

хорошего годных приемов а во-вторых в

код можно писать комментарии вот

комментарий конечно заставляют код

несколько разбухать зато человеческий

взгляд может читать код и комментарии по

отдельности

что очень и очень позитивно пред чуть

позже расскажу

безусловно можно делать отдельную

документацию которая вообще лежит рядом

с кодом никакой сложности в него не

вносит а информацию содержит к сожалению

документации есть свои минусы

код можно добавлять в качестве сообщений

в комменты информацию информацию можно

добавлять в авто тесты информацию можно

добавлять в экземпляр в гитаре или есть

на самом деле очень много способов да но

я сфокусируюсь на основных вот как мы

можем добавлять информацию в сам код не

используя комментарии не использую

документацию ничего это очень простая

техника оно написано во всех книжках как

правильно писать код реального всех и

выглядят следующим образом вот если мы

возьмем кусочек поэтому пскова кода

слева да то мы видим что он не совсем

понятно что там происходит да вот юзера

то что это объект это идентификатор это

строка то есть в целом конечно кот очень

простой да можно догадаться

но когда такого кода 10 мегабайт то

регулярно возникают вопросы без ответов

поэтому вам правой части вы можете

смотреть вариант тогда как то код можно

модифицировать мы можем добавить

информацию в качестве именованного

аргумента мы можем добавить информацию

изменив идентификатор мы можем добавить

информацию изменив метод там реально

очень много способов есть целые трактаты

посвященные тому как писать говорящий

кот реально клевая практика и позволяет

решать кучу проблем есть даже апологеты

такого подхода который говорят что лучше

код это код в котором кроме кода ничего

нету все методы говорящие хорошие

декомпозиции все замечательно потом

приходит зверушкой говорит что она

против и такой проект гниет абсолютно

так же как гниют более комментированное

собрать и почему потому что есть кошелек

вот кошелек это очень неприятная штука 2

после проблемы сложности которая нам

мешает

кошелек он на самом деле не простой ум

кошелек миллера более известна как

проблема 7 плюс-минус 2

в чем заключается от неприятности то

неприятно заключается в наших мозгах а

которые не могут легко оперировать

количеством объектов больше семи

да то есть если мы смотрим на фрагмент

кода в которым реально много всего мы

его не можем загрузить себе в мозг

быстро да и когда такого кода становится

очень много мы просто не получается нас

понять проект что же там происходит да

нам приходится бить его на маленькие

кусочки как-то пытаться вот разбираться

небольшими частями а когда мы добавляем

маячки а сам код у нас случается очень

большая неприятность у нас в коде сразу

становится две сущности

код который для компилятора которые дела

делает да там

элементы магазин добавляет еще

чего-нибудь и дополнительной информации

для программистов говорящими на методов

там длинные какие-то не идентификаторы и

так далее и это все сущности которые

складываются а поэтому как только мы

добавляем в код очень много метод

информации он пухнет а проект сдохнет

вот альтернативы является добавление

информации не в код а в документацию вот

есть апологет этого подхода которые

говорят что код написать чистенький всю

необходимую информацию для навигации по

коду мы складываем в отдельные документы

и приходит у нас счастье вот но к

сожалению счастье не приходит потому что

у нас нет он связи между кодом и

документации точнее она есть но нам в

головах людей в метатегов автоматики и

так далее поэтому если мы пишем много

документации реально много документации

такой хороший бюрократический проекта

годика через два у нас документация от

проект просто отрывается и уходит

свободный полет до

то есть программисты пишут код который

уже документации давно ушел

бизнес-аналитики радостно пишут

документацию которая не имеет ничего

общего с кодом еще через годик выходит

комплекте проблем голов т.к. 50 делать

так ням вот почти проект переписываются

0 если что photoshop только на моей

памяти 5 1 0 переписывали вот потому что

complexity проблем это очень дорого это

очень дорого да поэтому надо бороться а

как мы видим тут наблюдается некая

закономерность

что куда бы не клали мы дополнительную

информацию это место начинает пухнуть а

проект дохнуть начинаем класть очень

много информации в кот кот распухает

количественно-качественных о становится

труднее читать поддерживать начинаем

дополнительную информацию складировать в

документацию документации начинает расти

в объемах отрывается от кода уходит на

орбиту да вот некая такая неприятность

мы даже можем вот псевдо закономерность

вывести что чем больше информации кладем

в одно место тем больше кошелек миллер и

чем проекту

хуже на одном из своих предыдущих

докладов я рассказывал про исходники там

как лучше хранить исходники проекта и

там тоже была некая закономерность что

любой проект начинается с маленького

такого файлика 1 года

потом мы добавляем добавляем добавляем

туда код и файлик начинает пахнуть вот и

для того чтобы с этим что-то сделать нам

его приходится разделять

да потому что кошелек миллера вот

давайте посмотрим эту аналогию более

детально вот когда нас маленький проект

становится большим до растет что у нас

происходит справа нас один файлик

потом у нас несколько файликов потом у

нас модуль и наконец у нас отдельный под

проект до на самом деле тоже абсолютно

аналогия в комментариях когда у нас

программ из 10 строчек комментарии не

нужны потому что весь наш код

замечательно укладывается кошелек

миллера человеку может иди на момент на

загрузить в память все понятно когда

кода становится больше строчек так

триста-четыреста да у нас уже и

появляются некие трудности это все

понять поэтому мы начинаем писать код

более осмысленно применять то что

называется best practices

мы начинаем давать правильные имена

методом делать декомпозицию в класс и

так далее для чем это все делаю не для

компьютера компьютеру глубоко пофиг у

нас там чисто процедурной функции в

количестве 50 штук или класс несколько

красивых

паттернов и не какая-нибудь абстрактные

фабрика мы это делаем для себя чтобы

добавить в код информацию о том как он у

нас логически организованы с ним дальше

работать можно было там когда кот

начинает дальше увеличиваться вот нам

уже не хватает той информации которую мы

можем в него запихнуть потому что начнем

запихивать дальше будет java вот куда не

посмотри абстрактный фабрик абстрактных

фабрик да ну нельзя с этим работать я

пробовал вот выглядит очень красивый

комментариев можно не ставить

поддерживать к сожалению тоже бесполезно

вот поэтому дальше мы начинаем добавлять

комментарии как комментарии да это уже

следующий уровень он сам код сложности

не добавляет он просто рядом лежит

поэтому в кошелек миллер и загружаем код

смотрим оооокей 7 плюс-минус 2 чего

непонятно взгляд перескакивает на

комментарии да это еще 7 плюс-минус 2

когда проект становится несколько

мегабайт нам туже комментарии не

помогают на самом деле поэтому мы ищем

еще какие-то уровни абстракции куда

можно положить информацию на помощь нам

приходит к метро в комментах можно

замечательно писать комментарий которые

тоже лежат отдельно и которые не

добавляют сложности в сам код ну и

конечно же документация документация это

просто замечательно то что это еще одно

место где можно хранить информацию от

которой не распухнет код но при этом мы

всегда должны помнить что чем больше

информацию положим документацию тем

быстрее она оторвется от проекта вот не

прошло и получаса моего доклада мы можем

сделать неким промежуточные выводы

которые заключаются в том что код мы

пишем для компьютера для человека он не

предназначен изначально

и для того чтобы сделать его легко

читаемым для человека да мы расставляем

разные маячки вот я показал несколько

маячков это сам код комментарии коми это

документацию не тесты много всего да то

есть комментарии и это всего лишь один

из маячков которые мы используем вот

определившиеся чем на фига нам нужны

комментарии

я теперь попробую дать несколько

кулинарных рецептов поделиться опытом

вообще рассказать о как живут они в

больших проектах пишутся

чтобы не было потом мучительно долго и

больно и так есть у нас какой-то

фрагмент кода небольшой из . так 30 вот

мы его написали все замечательно и встал

перед нами вопрос вот комментарий то

сюда писать или нет если писать ту какой

вот все программисты постоянно

сталкиваются с этим вопросом понятное

дело это приходит с опытом там то есть

проработав разработчикам лет десять

человек уже инстинктивно чувствует объем

информации в кода он на него смотрит

представляет себя через год ему сразу

понятно вот через год при взгляде на

этот код все будет о'кей

или нужно что-то написать поставить

маячки

но есть простые способы которые позволят

начинающим программистам программистом

среднего уровня писать комментарии не

очень плохо а способ мы долго выводили

выводили выводили выводили получилось у

меня следующая хороший комментарий такой

правильный который помогает а не вредит

он отвечает вот на такой вопрос вот все

хорошие комментарии которые видел

отвечали на этот вопрос все плохие

комментарии которые я видел не отвечали

на этот вопрос да поэтому есть тенденция

вот есть тенденция а почему именно такой

вопрос да почему не какой-либо другой

потому что код сам по себе он всю

остальную информацию содержит

в ходе дофига информации в коде уже есть

информацию что там происходит да и в

ходе уже есть информация как оно

происходит мы смотрим на ход мы видим

там список в списке кладем элементы да

нам не надо писать о том что здесь мы

кладем элементы в список это видно по

коду

нам не надо писать о том что мы добавили

пользователя

это тоже видно по ходу а вот если мы

напишем

что-нибудь вроде сохраняем нового

пользователя в основное хранилище для

дальнейшего использования то сразу

становится понятно что тут у нас

центральная точка куда ни на свет бегут

да этот комментарий очень поможет нам

через полгода когда мы вернемся в это

место чтобы нести хаос и разруху чтобы

писать много хорошего кода вот давайте

посмотрим чуть-чуть

примеров да вот это вот классический

пример вот архи классичес просто вот я

его из учебника взял вот эталонной

комментарий вот у нас есть какой-то

дентифик атор мы ему присвоили циферку и

мы пишем в комментарии присвоили цифро

комментарии замечательно на вопрос зачем

он не отвечает как этот комментарий

можно поменять смотреть все то я могу

поменять просто комментарии да не хорошо

ли голову там написано 1 пользователь по

умолчанию админ вот а поменяв

комментарий который отвечает на вопрос

зачем зачем нам цифру 400 этаж 1

пользователь у нас админ да вот мы

поставили цифру соответствующую admins

того все стало понятно при этом мы

помним о том что код это комментарий

один из маячков маячки разные бывают да

мы можем добавить ещё маячков смотрите я

часть информации перенес сам код то есть

сделал дентифик adr говорящие и сразу

сократил комментарий почему iskratel

комментарий что он админ стало понятно и

skoda до в комментарий оставляют только

ответ на вопрос зачем зачем его админам

потому что 1 пользователю вот такой код

намного лучше читается на самом деле это

вот практически все примеры комментариев

которые в моем замечательном докладе дам

доклад и комментарии под комментариев то

нету а давайте посмотрим на комментарии

которые бывают в реальной жизни

зря сюда пришел отсюда лучше

да вот а типичные комментарии в реальной

жизни взяты из реальных проектов в

комментарии до удаляем пользователя

вот спрашивается в коде же видно что

users дели dkaren

да ну видно же что удаляют пользователя

зачем об этом писать это не несет

никакого новой информации только

добавляет зубов complexity проблем вот

хорошим комментариям будет комментарий

зачем но только при том условии что из

кода непонятно зачем да то есть если

метод у нас в целом говорит зачем там а

это не пишем а если метод не говорит

зачем то мы пишем что например коммент

больше не связан с пользователем все

не нужна информация комиссии

пользователь удаляем его замечательные

комментарии о том что мы сортируем

список users . сорт вот и комментарий

которые пишут 99 разработчиков сортируем

список в комментарии новой информации

несет просто тонны вот смотрим радуемся

дано вот написать зачем мы сортируем

список что мы сейчас будем самых старых

пользователь оттуда извлекайте сразу

понятно что там бак потушу не в ту

сторону отсортирован то это не пишут вот

плодят головы у зверушки куча информации

о том какие байтом и куда кладем до этих

это в протоколах там волшебный дентифик

атр там идентификатор сообщения вот

смотришь на стримы the message . иди ну

да идентификатор сообщения положили а

зачем вот как вы видите комментарий

который отвечает на вопрос зачем он в

целом едрён хорош и очень помогает вам

дальнейшие работаем с кодом честь комета

комета это очень важно возможно в одном

из следующих своих докладов я расскажу о

кометах

о том как проект замечательный

эволюционирует о том как в комментах

содержится мет информация разным подходу

в поисках комментах связь комментах

стеки to me

но не сегодня сегодня скажу что кометы

это замечательное место для хранения

информации который во первых не в коде

поэтому он не распухает но рядом

замечательно нашей системы контроля

версий любая дар гид mercurial наш суп

вершин она однозначно связывает commit с

некими изменениями кодом поэтому камедь

всегда лежит рядышком и мы можем туда

писать комментариям вот а более того

когда мы используем к нет и мы можем

прямо из комментов делают ссылочки на

еще какие-то источники информации

например на систему управления задачами

код который так прокомментировал он

реально клев потому что мы смотрим на

фрагмент кода дамы щёлкаем пальцами

говорим blame у нас для каждая строчка

указан камедь смотрим на какую-то

строчку не нравится на нам идем в

сообщении в комете а там написано bug

fix такой то кликаем идем на багтрекер а

там подробно и 10 страничное описание

что это за баг такой был и как с ним

полтора года боролись и сразу все

становится страшно но понятно вот пример

для комментов он абсолютно такое же да с

комментами на самом деле очень весело

там сообщения бывают просто фееричные

вот любимые сообщение которое я видел на

протяжении многих-многих лет управления

отделом разработкой это удалили файл

небольшой рефакторинг а поменял пару

строк каждый раз когда я видел такой

кометы подходил к человеку говорил

смотри вот div вот в div и явный ville

видно что ты добавил два файла зачем об

этом писать сообщения к медицина

дописать зачем ты добавил новую

функциональность по какому типу какой

примерно кусок до небольшой рефакторинг

это тоже ну вот мы делаем div мы видим

что помине на пять строчек

идентификаторы поменялись сортировку

бран там происходит что-то

рефакторинг небольшой доход совершенно

по-другому работает вот в комменты можно

добавлять очень много нужной и ценной

информации

которая отвечает на вопрос зачем это

основополагающий ключевой вопрос я

собственно говоря подготовил для вас

такую вот пошаговую инструкцию которая

безусловно неправильно но отражает такой

небольшой объем знаний которые я собрал

за десятилетие коммерческой разработки и

так а мы написали код

хороший код и хотим добавить в него

информацию для себя через годик либо для

юных падаванов месяца через три как нам

это сделать мы смотрим на код а сам по

себе отвечает на вопрос зачем понятно

зачем тут этот ход если понятно все

дальше ничего не делаем комиссий что это

задача пишем дальше а если код на вопрос

зачем не отвечает а можно как-то немного

переименовать идентификатор или

что-нибудь разделить чтобы из методов

идентификаторов объектов было понятно

чего происходит если это можно сделать

малой кровью не доводя кода распухание

делаем и наконец если кот не отвечает на

вопрос зачем и не получается его

чуть-чуть приукрасить чтобы отвечал мы

пишем комментарии прям вот такой

комментарии пишем со чем тут этот код

как альтернативный вариант эту

информацию можно поместить в

документацию но тут сложный и тонкий

момент помещение документацию информации

в комменты и в документацию да она

требует некой тренировки вот а в

комменты нужно помещать

определенную информацию о том для чего

вот кусок кода в документацию нужно

помещать информацию только ту которая

через полгода от проекту точно не

оторвется да то есть какие-то общие

архитектурные соображения небольшие

чтобы менять было легко вот поэтому

тривиальный алгоритм выглядит следующим

образом на вопрос зачем отвечает нет

окей переименовать что-нибудь можно все

равно не отвечает

пишем комментарии отвечающий на вопрос

зачем поработать да а есть еще большое

количество направлений в которых можно

работать с комментариями и вообще

информации с кодом я не хотел вас

сегодня перегружать информации поэтому я

затрону вам несколько моментов которые

но настолько популярна что не затронуть

их был бы просто преступлением

а во первых это опять то есть информация

неких программных интерфейсов

а чем вообще и пей отличаются от всего

остального кода они отличаются тем что

мы и пей наружу даем а кот особенно не

даем иногда он закрыт иногда он слишком

сложен и так далее то есть некий api для

внешних разработчиков считается хорошим

тоном этот api полностью документировать

а исходя из того что разработчика кода

не будет он не является частью проекта и

он никогда не пойдет его смотреть да тут

надо помнить следующую вещь что и 5 мы

документируем полностью весь остальной

код мы так не документируем я

консультировал проекты и помогала

команда но которых был кот стал например

комментирование всех методов во всех

классах вот такой вот замечательный ход

style

вот планету собственно говоря

руководствовались этим принципом что раз

вот мы документируем айпи и вот это

клёво это замечательно давайте

документировать все

вот в результате ребята вместо того

чтобы писать код зарабатывать деньги

писали комментарии вот там

количество потраченных денег на единицу

работы был просто фееричным поэтому

когда мы документируем и передам его ком

документируем полностью но не потому что

он волшебное про что мы будет

пользоваться люди которые проекте знают

мало исходников нет

из комментариев можно генерировать

документацию да опять же чаще всего это

используется совместно самым

документированием и пей потому что

документации нам как правило нужно для

внешних разработчиков да а для

внутренних мы пишем сами ручками потому

что если внутреннюю документацию будет

слишком большая объемная да то

количество усилий на ее поддержание

будет не рационально на то рвется от

проекта и улетит своим курсом будет

очень плохо вот поэтому он генерирование

документации н mas en masse

автоматическая лучше всего делать именно

из документированного и 5 а какие-то

наши внутренние архитектурные вещи да

безусловно сфинкса ducks ген они

позволяют это интегрировать в проект но

как правило увлечения такими методологии

me to добра не доводит уж информации там

начинает копиться копится копится

копится

а потом вот этих вот местах где эта

информация скапливается но начинает

пахнуть и дохнуть это заметно даже на

очень больших проектах которые излишнее

количество документации помещают вам сам

код ну конечно генерация тестов есть

много разных забавных способов поэт они

вообще есть механизм док тест который

позволяет в комментарий написать

фрагмент кода волшебной команде это

фрагмент кода выполнится и что-то нам

протестирует но это уже эдванс этой

методологии которые можно применять если

у нас а все совсем хорошо вот ну да за

сим радостным моментом я заканчиваю и

перед тем как вы зададите ваши вопросы

хотел бы сделать небольшое объявление

а послезавтра у нас начинаются 2-х то на

это хакатон

об фрол и их которым касперского abs

урал общего назначения касперский для

game девах которые отличают с тем чтобы

мир ментором там

я ада поэтому если вы хотите на халяву

получить кучу всякой интересной

информации приходить сами приглашайте

своих друзей разработчиков и помнить что

их к тоннах а еще очень нужны дизайнеры

поэтому если у вас есть знакомые

дизайнеры которые хотят пару дней

потусить в очень интересном коллективе

поучаствовать в разработке реально

клевых проект приглашайте их вот ну

пожалуй все что я сегодня хотел

рассказать я рассказал она теперь

послушай ваш вопрос a cotton

abs урал будет в нагатино это буквально

три минуты от метро там огромное

помещение очень клёвая мы там проводили

хакатон энжел хак если несколько раз не

изменяет касперский будет где-то ближе к

центру мне вот девочки скинули адрес в

любом случае есть официальные сайты этих

обоих мероприятий да куда вы можете

зайти прямо сейчас мобильных устройств и

посмотреть да да да вот тут все есть

специально той дует будет скоро выложена

на сайте и коллеги кто смотрит меня в

прямой трансляции в записи не

стесняйтесь вот вам e-mail

вот я не всемогущ не всезнающим у меня

куча ошибок неточности поэтому если вы

не согласны в интернете кто-то не прав

вот я жду

да пару вопросов как я говорю мы можем

сейчас

задать есть вопрос в первой части .

вот такая ситуация есть стики или нижней

и 1 коммент вряд ли получится

я не сдается отдельно верно вот этот

вопрос .

каждый камень твинки безусловно нужно но

не просто так а у меня на это есть

специальный слайд дайте мне буквально

секундочку оно поломалось

так куда мне нажать чтобы я хочу вернуть

счастье радость людям из любого давай до

2 секунды

так зверушка еще зверушка а вот она так

вот а

смотрите упоминание тикетов в комментах

на самом деле это целая история там

просто используют разные теги комменты

которые в процессе героической работы на

теги там они помечаются тегом с что

означает что эта работа в процессе

висками 3 ференци сам тикета

а последний коммент который добивает и

закрывает тикет да он помещается

например fix и это приводит в череде

событий автоматическом закрытию этикета

и так далее

зачем было потрачено столько

секундочку поясни свою позицию почему

primergy комменты в комментах уходят в

нам потому что мы берем мы делаем у нас

а это это на самом деле одна из практик

одна из практик такое случается крайне

редко а потому что большинство практик

например а популярные кит flow да они

практикуют ребей

то есть все наши комментарии цепочки они

выстраиваются относить на корни и мы

видим небольшие кометы

а у этих двух подходов есть плюсы и есть

минусы да как обычно вот куда информацию

кладем там пухнет и дох нет а если мы

все комменты схлопывается 1 а то мы

видим финальную картину и не захламляем

транг это достаточно удобно но но

а если мы видим индивидуальные небольшие

комитета нам их удобно review ведь

потому что когда человек например 5 дней

работал над какой-то функциональностью

потом за к метил полторы тысяч строк я

пять лет review vin код и это очень

трудно ли в явиться на когда у человека

этим полторы тысяч строк разбита на 150

мелких комментов да безусловно там есть

какие-то вещи которые сначала сделали

потом выкинули много вещей которые не

попали в финал но это быстро читается

понятно как у человека собственно говоря

шла разработка дай можно быстро от

review ведь

да безусловно безусловно без а так что

при схлопывание при схлопывание веток

безусловно эту информацию теряется но

тут уже тимлид как человек ответственный

до выбирает что именно и как он

собирается хранить например а я знаю

одна из команд который так с хлопала

тикета

при схлопывание у них выполнялся

скриптик которые с кучу мелких комментов

делала один при этом соответственно рифы

складывались в fix это один из вариантов

большой вопрос поэтому остальное беседу

масса до господа у нас будет пицца я

остаюсь с вами поэтому подходите по

одному да и группами тоже находиться до

рассказываете мне что я не про было

очень трогательно слова наших

символическое слова передается артем

огнем начинаешь начинаешь начинает так я

обещал привожу

и владике что мы сразу

у нас видео как работать

