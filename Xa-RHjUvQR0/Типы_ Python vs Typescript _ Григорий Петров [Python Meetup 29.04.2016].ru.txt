горе и я технич

евангелист в

я

и разраб

вы я их уже больше 15 лет иногда даже не

своими руками

вот иногда я рассказываю о том почему

программа разрабатывать тяжело почему

они гниют изнутри почему 70 процентов

проектов провальных each с этим делать

вот делаю я это потому потому что сам не

всегда понимаю что с этим делать и хочу

как синхронизироваться с окружающими да

там рассказать какую-то гипотезу

посмотреть как окружающей поржут может

скажем скажет чуть не интересно и

сегодня я вам расскажу немножко о том

почему собственно говоря разрабатывать

сложно и как с этим помогает бороться

python чтобы не было скучно python я

буду сравнивать с java скрипта потому

что многие разработчики говорят что по

это надо закопать выкопать java script и

использовать его и на фронты индии на

быка индии в мобайле и даже в часах

вопрос так ли это нужно ли закапывать

нужно ли выкапывать мы сегодня это

обсудим начнем с того почему собственно

говоря софт разрабатывать сложно на это

есть большое количество разных причин

потому что постоянно вылезают какие-то

ошибки потому что наливается на

копирование мы каждый раз пишем какой-то

новый софт потому что старые уже

написали его можно просто скопировать

его не надо почему то писать повторно

потому что очень молодая индустрия никто

не знает как писать правильно потому что

отсутствует фундаментальное образование

но они тоже не знают как писать

правильно поэтому они не могут этому

научить и ой

наконец потому что кошелек миллер и и

множество других интересных причин

сегодня я буду говорить в основном про

ошибки ошибка это такое очень общие

слова да вот когда два плюс два сложили

получилось 5 вот это явно ошибка а когда

мы запустили наш python 27 код на python

и 26 он сказал мяу

ошибка это не ошибка и вообще кто

виноват ну админ понятно виноват и что

делать для нашего удобства ошибки можно

по-разному делить можно вдоль можно

поперек хороший способ деления это на

operational

р-р и programming operational р.р. это

когда программист в целом все написал

правильно а потом эту

запустили запустили не там нет

окончилась память пришлось 100 человек

больше 100 раз больше человек чем

ожидались в общем программы то в целом

верно и но запустили ее совершенно

неправильное но все он сказал имя а это

обычно называется operational р

то есть программа собственно говоря

правильной а вот все остальное нет

второй тип ошибок этом и просто

опечатались да то есть программа она в

целом неправильно

ну то есть программисты часто когда

писал думал что она работает так а потом

прошу пришел глобл интер претит лака и в

целом но реальность несла свои жесткие

коррективы когда реальность вносит свои

жесткие коллективы это примерно вот так

вот и выглядят им большинство ошибок они

так и случаются когда программисты пишут

код

он ожидает что этот код будет как-то

где-то работать а потом он этот код

запускает и получается что получается

почему так получается ну вот но

программе стучу идиоты мы что не можем

как-то ну заранее это все предусмотрите

написать правильно можно на самом деле

утешать себя мыслью что если вот взять

каких-то красно дипломников топового

вуза таких сферических поместить их

вакуум до которые знают алгоритмы и

структуры данных математику и все другие

вещи которые к программированию

отношения не имеют взять заказчика

который точно знает что будет через три

года умеет предсказывать bull

еще вот совместить их то получится

идеальный софт которым не будет ошибок и

все будет хорошо

лет через 10-15 файлов в целом понимаешь

что красный диплом ником гон в целом

феликс точно так же как и студент ону

идеальный заказчик тоже не угадывает и

софт приходится переписывать по три раза

почему так на самом деле потому что

кошелек про кошелёк я рассказывать очень

люблю и рассказываю примерно на каждом

первом своем выступлении тушь кошелек он

не простой это кошелек миллера она уже

провела 7 плюс-минус 2 был такой ученый

java люблю называть естествоиспытателя

миллер который на своих коллегах стоял

бесчеловечные эксперименты по вниманию и

нашел некую закономерный что оказывается

когда человек внимательно что-то

рассматривает например разбросаны на

столе карты или пытается запомнить лица

и лея числа или кусочки программы то как

это ни странно мы в фокусе внимание

можем удержать не так много объектов в

целом от 5 до 9

отсюда правило 7 плюс-минус 2 а когда мы

пытаемся удержать фокусе внимания больше

объектов например 100 разных технических

терминов наш память это просто не держит

да ну вот физиология такая и что же с

этой физиологии делать софта писать

хочется иногда очень хочется есть много

разных опций

например а мы можем тратить время и силы

и деньги на борьбу с нашей физиологии да

то есть если у нас не получается в

памяти фокусе внимания удержать

простейшую программу с 1000 элементов

окай мы будем с этим героически бороться

мы будем тестировать переписывать

покрывать юнит тестами по самой пикачу

функциональными тестами там программисты

будут комментировать каждую строчку на

но и прочие не очень полезное действие

а либо мы можем на это все наплевать

быстро чего-то фигачить фигачить

фигачить она будет как-то работать в

общем случае у нас есть выбор либо мы

долго долго долго долго долго очень

долго пишем идеальный кусок софта

который не глючит не падает и не

существует ли программистом быстро на

коленке фигачат

какой-то портатив который иногда

работает на его компьютере зато быстро

но это крайности

огромным преимуществом является то что

мы в целом сами можем выбирать чем мы

хотим да где то мы хотим код по

тестировать дед мы хотим быстро на

фигачить на коленке тем самым достигать

какого-то баланса у нашего программного

продукта вот и по нашему отношению к

ошибкам их можем делить собственно

говоря поперек на ожидаемые

и неожиданные ожидаемыми ошибками обычно

называют те ошибки с которыми мы хотим

бороться

вот то есть когда мы пишем какой-нибудь

backend world of tanks дамы в целом

ожидаем что к нему например придут

пользователи что их будет сколько-то

поэтому подходы готовы потратить кучу

денег чтобы во-первых сделал для этого

какую-нить архитектуру вторых

протестировать это разными тестами и

даже может немного unit тестов туда

зафигачить чтобы она не сразу упала а

если мы делаем какой-нибудь стартапы нам

надо быстро быстро право лидировать идею

то нам в том же бэг-энде в целом ну нам

поиск сколько туда придет days придет 10

человек ok если придет тысячам просто у

переделаем поэтому одна и та же

функциональность сюрпрайз она может для

одного продукта содержать какие-то

ожидаемые ошибки мы туда будем

вкладывать деньги для другого продукта

это будет неожиданная ошибки с которым

бороться вообще не хотим что там памяти

чет до перри запустить сервис и оставьте

его в покое

большинство ожидаемых ошибок

на самом деле programmer р то есть мы

совершенно точно хотим бороться с нашими

опечатками мы совершенно точно хотим

тратить деньги на то чтобы наша

программа на примерно соответствовал

тому что мы задумывали

и делала то чего мы хотим а большинство

неожиданных ошибок они operational

мы не можем это предсказать поэтому мы

не очень хотим вкладывать деньги в

борьбу с ветряными мельницами вот я

видел много кейсов крупных компаний

когда расставляли приоритеты ожидаемых

неожиданных ошибок таким образом что

например хотели ожидать все утечки

памяти и писали софт три года а потом

его выкидывали так и не парились iv

потому что ну блин дорого ожидать такие

ошибки очень дорого и по методам борьбы

ожидаемой неожиданно ошибки они реально

разные когда мы хотим бороться с

ожидаемыми ошибками что мы делаем но мы

тестируем ход мы показываем команде

стандарт кодированием чтобы они ему

следовали как-то могли хоть немного

читать код друг друга мы проводим кроссы

we review когда разработчики ржут над

кодом друг друга мы натравливает на этот

код всевозможные винтер используем

тепреь всячески улучшаем качество этого

кода боремся с тем что там ожидаемо

проявиться с неожиданными ошибками денег

мы тратить не хотим мы хотим просто

узнать что они там есть и для борьбы с

неожиданными ошибками когда наш код

ну во-первых мы тоже тестируем

тестирование замечательно подходит и для

одного и для другого типа ошибок этот

код мониторим и перезапускаем сервера мы

делаем наше решение распределенным чтобы

оно могло замечательно падать на эрланге

кусочками и миллионам других способов

боремся с неожиданными ошибками путем о

упала перезапустите забудьте сегодня я

буду рассказывать о типах то есть вы

оценили до из всех причин файлов и

сперва выбор выбрал ошибки такой

небольшое подмножество теперь из всего

что относится к ошибкам я выбрал типы и

вот о типах мы сегодня поговорим по сути

и типы это капкан и для ожидаемых ошибок

которые мы раскладываем в нашем коде а

затем происходит какая-то магия декамп

каны срабатывают и экономит нам кучу

времени сил и денег в целом википедии

написано абсолютно тоже самое

типы они есть во всех языках

программирования и потому как язык

программирования к типам относятся

или не относится они бывают разные

например очень популярны и деление это

динамический типизированный языки и

статически типизированный языки успешный

пример динамический типизированный ого

языка это python в по это не с одной

стороны типы

есть а с другой стороны расставляет он

их сам то есть вы пишете дентифик outer

говорить что там лежит список ipython

собственно говоря у себя запоминает что

окей тут у нас список

все хорошо и если в процессе выполнения

программы вы этот идентификатор

попытаетесь с ним сделать что-нибудь

неестественная для списка

да например извлечь корень то все скажет

вам что вы были не правы а есть

статически типизированный языки где вы

типа указывайте ручками например си плюс

плюс вы им оказываете везде везде везде

везде типы и чтобы собственно говоря

капкан сработал вам не надо ничего

запускать вы компилируете программу уже

на этапе компиляции компилятор и вам

много всего хорошего расскажет а еще по

отношению к типам языки бывают сильно

типизированный страна слабо

типизированный это немного

перпендикулярно говорить мы об этом не

будем но это всего лишь показывает

а насколько язык программирования

накладывает ограничения на использование

типов до слабо типизированный язык такой

как например java-script

она позволяет сайте pmi делать все что

угодно хотим сложить страх

вы число о к числу и строку окай в

зависимости от того как все дентифик

отары расставлены в выражении какие них

типы а также положение звезд у нас в

конце всегда что-то получится как

правило это будет очень неожиданно для

всех участников процесса и об этом

огромное количество vtf в интернете есть

более сильно типизированные

языке которые не позволяют делать с

типами

всякие разные действия например

складывать строку иное число

ну не суть давайте посмотрим на код в

очень маленьком количестве моих

выступлений есть код вот в этом

выступлении есть кот его даже будет

больше одного слайда и для моих

выступлений очень необычно слева мы

можем видеть код без капканов это кот

курильщика

и собственно говоря у нас есть некий

метод

от юзер который получает имя моего

замечательно вызываем а через полгода мы

провели лифа рефакторинг вместо имени мы

стали передавать туда идентификаторы у

нас все в рандоме рванула через полчаса

и потом мы долго долго копались stack

trace ах справа находится код здорового

человека который от левого кода не

отличается ничем кроме того что указан

тип то есть там где мы раньше писали

идентификатором теперь мы пишем : стр

этим мы явно указываем языку

программирования в данном случае это

python что вот тут вот тут мы совершенно

точно будем использовать строк вот мы

ставим капкан как только там появится

что-то отличное от строки как конкурс

работает мне об этом пусть кто-нибудь

скажет и когда через полгода этот код

подвергся рефакторинга

еще до того как что-либо запускается

капкан срабатывает и кто-то нам об этом

говорит собственно говоря это

динамическая и статическая типизация в

динамическая типизация типы

автоматически статические вы

расставляете ручками и ни одна из этих

типизацией она не лучше другой у каждой

свои плюсы все минусы там все реально

строго в динамической типизацией python

мы можем очень быстро разрабатывать

кодом и фигачим фигачим фигачим у нас

практически весь код по делу

мы не заморачиваемся ни с какими типами

но при этом все эти типы они есть но

капкан и python заставляет сам и

срабатывают они во время выполнения плюс

в ряде случаев python капкан вставить не

будет но передали какой-то объект но

обратились какому-то полю ну да это не

тот объект не то поле но вот так совпали

звезды что но там есть и все выполнилась

а через месяц вы узнали что ой

объект всегда не тот передавался ну

бывает жизнь больше статической

типизации все наоборот мы тратим время

на то чтобы вручную раз ставить капканы

плюс это расставление капканов от бедных

несчастных программистов требует

каких-то усилий

реально писать код с типами немножко

сложнее чем писать код без типов зато

потом эти капканы срабатывают сразу еще

до того как мы программу запустили

позволяют нам ловить в них какие-то

ошибки но и собственно говоря вот

разработчики языков программирования они

постоянно ищут серебряную пулю как бы

сделать такую систему типов чтобы писать

ничего не надо было и при этом все

ошибки ловились но и дано исследования

продолжаются а мы в целом продолжаем

писать код и выглядит это примерно вот

так ну я сразу скажу что код он на самом

деле разных программирование это

очень-очень большая область и

программист который делает например

веб-страницы и программист который пишет

например драйвера для linux у них там

общих знаний может быть 10 процентов

поэтому конечно какой-то код пишется не

так какой-то код пишутся с многолетним

планированием по waterfall у и все по

спецификации но я думаю это не мосс кейт

мосс кейт как правило идет в два этапа

сперва у нас отжал у нас даже в крупных

компаниях

отжал то есть когда большая толстая

банка пишет маленькую мобильную банк

клиенту никто не будет это планировать

три года там сидят точно такие же

хипстеры которые под смузи

быстро-быстро-быстро фигачит прототип

когда они его зафигачили его тестируют

на людях показывают stakeholder ом и

если вдруг это хоть как-то работает

своего потом и сваривают в граните и это

все начинает отгружаться благодарным

клиентам то есть право

быстро-быстро-быстро проверяем какие-то

гипотеза потом вдруг если что-то

получилось то получившийся

стабилизируется и далее на этом начинают

зарабатывать деньги на практике это

выливается в следующий подход сперва

используются

языки с динамической типизацией такие

все гибки для быстрой разработки типа

пайтона на котором быстро фигачат

прототип много прототипов много

экспериментов а потом если вдруг

получилось то это все выкидывают и

переписывают на чем-нибудь вроде java

ну или шарпа или даже плюсов неважно там

где можно капкана расставлять чтобы

ловить все эти ошибки чтобы у нас

какой-то софт был надежный сперва

использовать динамическую типизацию

потом статическую это дорого иногда

очень дорого и беда-беда печалька

если какие-нибудь еще варианты как

показал гв2

собственно грига ведадо есть буквально

недавно вот несколько лет назад в мире

программирования

появился такая штука как гляди алтай

pink который является лучшим из обоих

миров когда мы сперва фигачим без типов

быстро быстро быстро быстро быстро и

потом если нафига china нам нравится там

его не выкидываем моим в том же самом

коде на том же самом языке

программирования добавляем потихонечку

типы где надо начинаем вручную

расставлять эти капканы

это что мы можем расставлять капканы там

где надо нам они там где говорит все

плюс плюс везде рост вас будут типа

везде это очень и очень круто

вопрос где это круто лежит если

посмотреть на кусочек мэйнстрима

да я специально сюда or long не вписал

но не надо смотреть на r long to грезил

taipan к но уже на самом деле много где

есть во первых есть замечательный java

script несколько лет назад сделали его

диалект typescript в котором есть граде

алтай pink

во-вторых python а где собственно говоря

под чутким руководством нашего бени

валиде кто--то рф life сделали по это не

35 type хинс и субст греть термин граде

алтай pink я подчеркнул из

соответствующего пеп ну там и php

подтянулась в седьмой версии там сделали

скаляр type declaration который по сути

тоже самое в ruby в самом языке не

сделали но рубят такая динамическая dsl

к из пластилина поэтому там сделали

контракт с . робби который делает то же

самое но в рандоме все sharp начиная с

третьей версии сделали тип интерференции

далее каждый следующая версия добавляет

ему немножко динамики и только в джаве

есть

рэп то есть же венчает мент пропадал за

номером двести восемьдесят шесть и может

быть в 9 джаве может и в 10 ч может их

следующий новый год они чего-нибудь

добавить и наблюдается некая тенденция

что в динамически языки программирования

вроде нашего замечательного пойти на

добавляют опциональные типы статически

типизированный языки программирования

вроде и сишарпа или плюсов добавляют

возможность быстро фигачить то есть

динамику ну а мы сегодня поговорим о

своем а по это не

и не своем о java скрипте потому что как

я уже говорил эмил

мир разработки сейчас колбасит все

говорят что а давайте использовать один

язык программирования давайте это будет

java script а все остальное закопаем

поэтому очень удобно знать сильные и

слабые стороны большинства популярных

технологий дам можно не просто сказать

отдавайте python оговорить это как-то

аргументированно давайте python потому

что

как выглядит grey dial той pink

выглядит она очень просто я его на самом

деле уже показывал вот тот вот код

курильщика это был поэт она код

здорового человека это был тот же python

где были вставлены типа в java скрипте

то есть в typescript и выглядит

абсолютно также то есть мы берем

идентификатор фигачим после него две

точечки после двух точек мы фигачим тип

и вот мы его как бы указали

вопрос о ким это вновь падике записали

чистим дальше делать ну вот а в случае

python а дальше делать май пай в случае

typescript а дальше делать тесты

немного поподробнее что такое май puy

puy puy это такой а linder статический

анализатор который основывается на пеп

3107 это еще spite и на 30 пошло вот это

вот замечательный синтаксиса двоеточием

и там еще есть специальный синтаксис со

стрелочкой а он с нами

же несколько лет простым их никто не

пользуется а вот в последнее время им

стали пользоваться вы запускаете некую

утилиту она смотрит на весь ваш

партнерский код с типами

и рассказывает вам где сработали ваши

капканы

май по он появился давно и тип он имеет

уже проверять давно но версии 35 python

и которые вышла буквально несколько

месяцев назад это все стало официально в

поэтому у нас вообще был такой

эксперимент вот много лет назад добавили

синтаксис для чего угодно и сказали ну

поиграйтесь с этим посмотреть там

чувстве можно сделать сделали типы игре

дейл той pink

но еще сделали котиков но и всегда

делают ее впо это не 35 официально в

пепа 0 4 8 4 сказали ok мы будем это

использовать для типов кстати вот 150

страниц как эти типы будут работать

собственно говоря а сейчас выйти по

можете указывать только сигнатуру

функции до методов хоть на самом деле не

так но по пепу так но в будущем гвидо

написал что если все хорошо взлетит она

уже хорошо взлетела то возможно

расширить этот синтаксис можно будет в

любом месте после любого идентификаторы

фигачить две точечки

май пай это отдельная программа вы ее

ставите вы натравливаете на python код

она там ищет эти самые две точечки с

типами все проверяет проверяет проверяет

и выдает вам отчётик когда вы этот код

запускаете все эти две точки и типа не

просто игнорируются их там нету

плюс май пай она сверх пепа проверяет

много всего интересного ну и не только

мой пай может это проверять например в

по и charme уже много-много лет были

какие-то простенькие проверки типов

благодаря последним событиям эти

проверки сталине простенький теперь по и

charm практически по всему пепу проверяя

кучу всего у java script все чуть более

интереснее

сам java script понятно никто ничего

добавлять не стал там и так есть все

интересно но есть такой человек

хелберг это очень интересный человек

сначала он сделал паскаль потом ему

понравилось он сделал delphi

потом ему понравилось он сделал сишарп

потом он подумал искал так ребят я

двадцать лет делаю языки

программирования сделал 3 топовых языка

программирования на nr на у меня

получается

давайте-ка я забабахаю серьезный язык

программирования и сделал typescript то

есть оцениваем до язык программирования

typescript сделан тем же человеком

который сделал паскаль delphi сишарп в

данный момент это топ вы программист в

мире который лучше всех умеет делать

языки программирования но гослинг автор

java с ним конечно не согласен но

гослинг сделал java

а хелберг сделал pascal и delphi и

сишарп поэтому хелберг а как-то длиннее

что такое typescript typescript

это на самом деле отдельный язык

программирования которые полностью

построен на новейших стандартов java

script а то есть хелберг он взял есть 6

из 7 есть 2015 есть 2016 общем все до

чего дотянулся руки у него реально

длинные собрал из этого язык мечты

плюс потом добавил туда типа при этом

typescript вам постоянно развивается и

постоянно пытается синхронизировать себя

с актуальным java скриптом поэтому можно

сказать что это такое вот самый

последний java-script плюс типы и

typescript

он тупо java script компилируется то

есть если в по это не когда мы взяли код

с типами запустили на поэта не начиная с

30 поэтому просто наш типы

проигнорировал

и наш код выполняется как обычный

поэтому вский тип проверяет отдельная

программка отдельно стоит скриптом у нас

есть компилятор мы запускаем компилятор

он считывает наш код на typescript я

проверю

идти по проверяет еще миллион разных

вещей и генерирует java script код

который можно запустить вес 6 шутка но

все cs6 в интернет эксплорере 6

неудачная шутка вот на в интернет

эксплорере 7 запустить уже можно да там

получается хорош такой старенький

vanilla java script на выходе

как всеми этими типами пользоваться вот

во первых где их можно ставить я уже

говорил в python не их можно ставить в

сигнатуру функции вам собственно говоря

при этом

май май май по и он расширяет пеп и

благодаря моей по и вы можете ставить

тип не ток в сигнатуре функции вы можете

ставить тип в комментариях где угодно вы

можете даже использовать поэтом 27 и в

комментариях там указывать типы мой пай

это все съезд и выдаст вам миллион

ошибок в typescript тем но это

собственный язык поэтому вы там можете

ставить типа везде видеть идентификатор

фигачить и две точечки дальше фигачить и

какой-то сложный тип он это все съезд на

самом деле это не очень большая разница

потому что и мой пай для python а и

компилятор typescript а не делает такую

штуку как

in her что такое эн-ферро собственно

говоря от английского ту in her выводить

обе эти утилита не смотрят на те тип

которые вы сказали пытаются сами угадать

использование типов во всем остальном

поэтому если в поэта него указали тип

для

параметры функции дата будет проверен

параметр функции тела функции все вызовы

этой функции все объекты которые функции

созданы и так далее то есть вы указывает

step в одном месте далее он

автоматически расползается по всей вашей

программе проверяется в миллионе мест

как показывает практика

указания в параметрах функций

более чем достаточно для большинства

практических кейсов благодаря вот этой

штучки как ставится капканы на составные

типы даже мы же не только там строки и

числа хотим проверять тут все предельно

просто любой класс который вы зафигачили

в поэта не по имени является типом вы в

любом месте если это место функциям

можете написать : имя класса и далее мой

пай внимательно осмотрит весь ваш код

если где-нибудь вы передали функции

что-нибудь отличной от экземпляра

данного класса капкан сработает вам тоже

напишут в консольки что знаете вы тут

ставили капканы просили вас предупредить

предупреждаю вот в этих 50 местах

функция вызывается с единичкой

а вы говорили что там объект будет от

ожидаемой ошибка чините в typescript те

так же можно использовать класс и плюс

можно использовать вот такой вот магию

вы можете просто в фигурных скобках

указать любой тип и сказать not

передается объект у него такие два поля

и это все будет работать и это очень

большая разница между python им и java

скрипта python используется так

называемое номинальное типизированные

когда вы все типы знаете по именам да вы

там классовое каждому классу даете имя

всем типам даете имена и по именам к ним

обращаетесь за вас крипте используются

структурное с позирование когда именно

на фиг игнорируется важно чего там лежит

вот typescript

он проверяет по содержимому если поля

там методы одинаковы то не важно как вы

это назвали

когда вы используете типы с контейнерами

в python и это выглядит следующим

образом вы используете некий дентифик at

our list is stopping а потом в

неожиданно угловых скобках указываете

что же лежит в контейнере и он

автоматически проверяется для typescript

а практически тоже самое практически

тоже самое только есть некий

синтаксический сахар да вы можете

указать просто типа потом две скобки

квадратные почему так происходит потому

что python

он на самом деле для типов используют

синтаксис самого python а до typescript

это новый язык в поэт они типа эта

надстройка над поэты нами единственный

новый синтаксис там 1 1 : одна стрелочка

поэтому любой тип в python является

валидным выражением пайтона и если вы

хотите указать что-то сложнее чем класс

строка или число то вы используете

специальный модуль а то и пинг и в этом

модуле есть всякие прикольные штучки тип

или старой

и так далее во всех этих прикольных

штучек переназначен метод гита этим в

результате вы с ним можете использовать

квадратные скобочки и делать вот такие

прикольные выражения которые май пай

воспринимает как типа в typescript те

просто используется собственный

синтаксис ну там как вырубить так далее

небольшая интерлюдия так как в python и

мы используем syntax python для того

чтобы указать типы

то у нас возникает интересный вопрос

относительно а форвард reference от если

мы например хотим сделать класса и

указать тип этого же класса в качестве

аргумента в paid они собственно говоря

но пока

класс declaration statement не сработал

мы как-то этот индикатор не очень можем

использовать

поэтому если в python и мы хотим

использовать тип который еще не случился

то мы просто используем строчку вот это

официальный способ сделать for war

declaration да она конечно немножко

коряво

что где-то мы используем просто

идентификаторы где-то строчки но в целом

в коде такое случается редко а вот java

script

нотации typescript а поддерживает форму

declaration

из коробки да то есть если вы объявляете

класс вы сразу можете фигачит

идентификатор этого класса в типах и оон

это автоматически все скушает вот но это

все песочница когда вы начинаете

фигачить серьезный такой код вы хотите

расставлять капканы для драконов да и вы

хотите сказать не просто что вот где-то

какой-то тип вы хотите использовать

герике то есть вы для методы ли для

какого-нибудь класса хотите сказать что

вот если тут на вход один тип подался-то

и и тот же тип должен поддаться на выход

или какие-нибудь более сложные

конструкции

так вы описываете не просто с какими

данными работает ваш код ну и какая у

него логика да то есть вот передали

контейнер с каким-то любым типом а так

как мы собираемся из этого контейнера

элемент вернуть что наверное возвращает

мы будем тот же тип что у элементов

контейнера

а какой это тип угадывай сам и для того

чтобы компилятор это все вам угадал и

капкан сработал в обоих языках

программирования есть henrique в пойти

не henrique работают через

не очень простой синтаксис до вас про

вызываете некий метод type war создаете

себе идентификатор для гейнери капотом

этот идентификатор используйте на

медведе типа

и вот везде где тот идентификатор у вас

встретился python попытается

автоматически под

ставить любой используем и типа

проверить что он один и тот же

но стоит скрипте синтаксис полностью

слизаны сишарпа потому что typescript

неожиданно делал тот же человек что из

сишарп поэтому там на все гении реки в

скобочках на самом деле когда

разрабатывался fight они вот этот вот

синтаксис был большой срок обсуждение по

поводу синтаксиса генериков и был очень

много предложений тоже сделать скобочки

как все sharp но на вид проявил

стойкость и сказал что для многих

выражения одно и то же выражение сможет

трактоваться разными способами в

результате у вас будут адовые ошибке

компиляции в которых как в плюсах

потребуется 10 лет чтобы понять он вам

сказал мы таких сказок не хотим поэтому

будем использовать вот той поры серии

используйте henrique с умом и не надо

фигачить где попади а где ни попадя

ну и конечно же и python и java-script

они подходят к типам серьезно то есть

это не какая-то игрушка которая

позволяет вам сказать что вот здесь

строка здесь число здесь классно и в

принципе все не там много механизмов

сделали пеппы для поэта на не вот такой

толщины но и в целом мануал typescript

own тоже тонкостью не отличается там

множество разных вариантов использования

типов их можно записывать запихивать во

всякие разные неочевидные места да есть

множественного синтаксического сахара и

много всяких разных спецрейсом дабы вы

могли точно сказать компилятору что вы

сказали через полгода когда придет

junior и попробуют испортить ваш код

компилятор это сказал джуниору

чтобы junior дожил до этого счастливого

момента нам нужна какая-то обратная

совместимость потому что henrique они

где-то там вместе с типами а кот у нас

вот он python 27

вот она наша legacy вот она уже пять лет

есть еще пять лет будет вопрос что

делать существующим кодом мы же не будем

переписывать все в paid они в этом плане

все хорошо май по и он будет проверять

код только если там указаны типа то есть

вы натравливаете его на существующий

проект там типов нет он вам не покажет

ни одной ошибки шутка на самом деле он

вам покажет миллион ошибок потому что

сейчас там есть некая такой спец

поведение что для глобальных

идентификаторов он будет как-то пытаться

угадать типа если не угадал то вам об

этом скажет но авторы май по я говорят

что в ближайшее время там два три года

не с этим что-нибудь сделают а пока не

сделали там есть возможность отключить

это все пир файл вот можно такие

специальные пай aй файлики добавлять

пустые и и типа будут игнорироваться

есть волшебный тип и не если выглядят

добавили немножко типов у вас сломалась

все

то там где сломалась выгореть ну тип и

не это значит что тут может быть любая

неведомое любой объект и что тут

пожалуйста не проверять и в любой момент

можно сказать а тут не проверять вообще

прям вот на этапе импорта вот ничего не

проверяйте там проверка типов будет

отключена и даже в пайта не 2 веточки 27

вы можете использовать типы

через комментарии да есть специальный

синтаксис пепе мой поет все поддерживает

и уже все работает и наконец для

существующих библиотек есть некий

репозитории types откуда нам энтузиасты

которых много пишут типы и складывают

пишут типы и складывают поэтому если вы

берете какой-нибудь там нам популярную

библиотеку тип там 200 до или торнадо

или

май пай или сай-фай вы заходите на тайп

shad а там уже лежат тип вот они конечно

могут быть там неполные с какими-то

косяками они не сразу появляются но в

целом вы их подключаете вам неожиданно в

коде показали ошибки вы посмотрели а а

правда ошибки вот так все это работает

для typescript а все намного хуже с

одной стороны typescript

он может компилировать java script код

дам то есть вы натравливаете его на

существующий проект и в отличие от

python он вам действительно не найдет ни

одной ошибки все будет хорошо но как

только вы первый же файлик переименуете

же стс он вам этих ошибок там найдет и

простых способов отключить нету вам

приходит на помощь тот же тип и

некоторого на первых порах расставлять

придётся очень много и есть такой же

репозитории с типами которые вот лучше

чем у пойду на python от появилась

совсем недавно поэтому type-c и ту

python его конечно наполняют его

наполняют очень такими темпами но там

пока не очень много в typescript этом

много за type скриптом стоит microsoft

вот поэтому у типу typescript а есть

практически для всего выставить npm

install чего угодно потом говорить а

деками для этого типа у вас появляются

типы от последней версии практически

маги по последние несколько месяцев уже

реально трудно найти что-нибудь для чего

типа не сделали у них правда последние

пару месяцев случилось stench of rails

когда они старенькую систему работать и

поменяют на новенькую там тоже все

поломалась но это быстро починит и

наконец подходим к кульминации

а какие же выводы из всего этого бардака

можно сделать выводы можно сделать

следующим что если у вас есть проект на

поэта ним немного времени и желание

расставить вашем коде капканы да потом

через полгода не было мучительно больно

вы это можете начинать делать уж

сейчас весь необходимый инструментарий

есть вы добавляете в свой проект

собственно говоря мой пай делаете

игноре и гонореи гонорея гонореи

канареек норе для начала чтобы не было

никаких ошибок и потом потихонечку

начинаете включать проверки типов он вам

потихонечку начнет рассказывать где

капканы срабатывать срабатывать они у

вас будут в неожиданных местах вам

гарантирована обеспечена радость и

удивление о том где же вашем коде я

такой характерный щелкающий звук и рев

дракона

вы туда приходите атому и правда поймали

ребята подождите нам нужен двухнедельный

рефакторинг а ну все до этого не

правильно работало примерно так выглядит

java script он все намного сложнее если

вы начинаете новый проект

круто его начинать на typescript ти до

вначале на typescript те вы сначала

фигачить фигачить фигачить там

практически нет типов а потом начинаете

расставлять капканы если у вас старый

проект то перевод вон на typescript он

займет время но если у вас это время

есть то это будет очень хороший

инвестиции в будущее таш typescript

реально большая история который

поддерживает microsoft и будущее

предсказать невозможно но ребята крутые

ребята делают правильное дело и это с

нами скорее всего останется надолго ну и

конечно же мы помним о первопричине

наших бед ошибки в коде не потому что

там программисты плохие или заказчик

идиота просто потому что мы не можем

держать фокусе внимания больше десятка

объектов поэтому ошибки были есть будут

есть но у нас есть инструмент чтобы с

ним бороться

все

спасибо за большое за интересный доклад

из-за как обычно интересную манеру

изложения такой вопрос каким образом

лучше поступать с кодовой базы которая

написана

одновременно для поддержки вторым и

третьим python am это очень хороший

вопрос

вида это предусмотрел и в пах и в мой

пай

встроенные механизмы для использования

типов в зависимости от версии пайтона и

не только в зависимости от версии пойти

номер зависимости от платформы да вот

typescript такое не может поэтому вы

используете штатные инструменты типов и

в зависимости от вашего кода у вас

просто будут разные проверки то есть

если я правильно понимаю если мой код

написан в такой манере что он

одновременно запускается на втором и

третьем пойти ли мне нужно типа

указывать в комментариях просто чтобы

это везде работала или аннотация типов и

там и там его 2 3 вы и они не

эти у вас же а условно говоря код он

будет интерпретироваться в зависимости

от версии да то есть

исправьте старика если склероз мне

сейчас creed annet

ведь на 2 седьмом капает они а кот

предназначены для третьего он простаивал

учиться не будет да разве ну вот

исправьте меня если я не прав то есть я

могу написать код в такой манере которая

позволит него и там и там запустит там

фьючер импорт и какие нибудь сделать six

какой-нибудь тот же сама использована и

типы все это поддерживает то есть вы

делаете тот же iv-v указывает стёпа

разные для того и того потом используете

один и тот же код и в зависимости от

того проверяете ли вы мое по им в 27 или

в 30 у вас просто будут проверяться

разные пути хорошо тогда у точнее 2

поэтому же поддерживает этот синтаксис :

стрела не-не-не-не-не он не поддерживает

и никогда поддерживать не будет но в тех

собственно говоря и фок в тех путях

которые будут выполняться на

а 27 вы используете комментарии хорошо

спасибо следующий вопрос

спасибо за доклад хотел спросить

рассмотрели вы еще варианты как

опциональной типизации как flow в и

буковский для как java script я не он и

предсказывать будущее но мне кажется что

flow последует за кофе скриптом но

потому что microsoft хайзенберг уже имя

забыл до память золотой рыбки пока она у

меня на мониторе висела я помню в общем

вот автор всего этого дела

хелберг до microsoft хейлс berghaus берг

мая а у фейсбука сейчас react

да вот react у них взлетит of low нет

хорошо еще был еще и остается этот

жестокий и вполне хороший link ложе для

того чтобы зажимать он сразу скажет что

да конечно от с док делает то же самое

что и джесс док но для typescript а

компилятор typescript а он сам по себе

linder

а + ничто вам не мешает делать цепочку

то есть typescript он компилирует java

script которым потом бабелем ленте мы

еще раз компилируем а который мы потом

если там добиваем просто вот все эти

цепочки адекватно работают друг с другом

но по-крайней мере цепочка typescript

бабель она устойчива и и много кто

используют

спасибо коллеги и еще вопрос им прошел

готовят она идёт ко мне

во-первых по поводу typescript а ну с

2013 года есть флаг который по дефолту

всем переменным типа и не задает и

перехода с джесс над с просто

переименовав файл и но вообще никаких

проблем во вторых я так понимаю что все

вот эти случаи когда вы проверяете типы

они по идее должны были быть словлены

нормальными тестами 1 с нормальные и я

целиком за то чтобы всех ограничивать

вот во всем в чем угодно типы везде там

переменная не длиннее 10 символов нельзя

использовать букву х в название функции

например ну то есть ограничивает всех на

сто процентов но по хорошему все вот эти

проверки типов они должны ловиться

тестами разве нет и это очень хороший

вопрос чем типы отличаются от тестов

более того я его долго ждал ждал ждал на

питер пай мне задали миллион вопрос

этого не задали поэтому я вынужден был

воспользоваться помощью подсадной утки

то есть человека которая заранее мало

что да если не спросят то обязательно

спросить вот здесь я такого не сделал

потому что старый я склеротик это не

только интересный но непростой вопрос на

самом деле по сути по сути типы и тесты

они делают одну и ту же вещь они

расставляют капканы

но они это делают немножко по-разному у

типов есть преимущество в том что во

первых они позволяют расставлять капканы

изнутри кода да то есть вы декларируете

свои намерения вы это можете ставить в

любых внутренних функциях в

имплементация hе так далее которые в

случае теста не всегда можно выдрать

изолирована запустить но на мой взгляд

это не главное преимущество а главное

преимущество заключается в том что когда

правой программист привыкает

использовать тип это не вопрос об

боится некая чуйка и на скажем так

наиболее популярных тропах где ходит

драконы он будет просто автоматически

ставить типа и капканы даже когда быстро

фигачит код но то есть от не становится

таким инстинктам и тут есть огромный

нюанс что вот когда человек пишет код у

него текущей фрагмент кода находится в

фокусе внимание вот этот самый кошелек

миллера да то есть он точно знает свои

намерения относительно коды чего он

сейчас хочет сказать и как только он

видит там что-то не очевидно он поставил

23 капкана эти капканы точно заморозили

вот его собственно говоря intention в

данный конкретный момент это позволит

ему не только через полгода во время

рефакторинга поймать и ошибку но и

реально при разработке кода вот я

например когда расставляю типа какие то

ну а просто в процессе очень быстрой

разработки кода я запускаю компиляцию и

я сразу же видел что вот такая фигачил

фигачил фигачил вот у меня кошелек

миллер и переполнился и вот я уже сейчас

вижу что я пытаюсь написать общей

неправильную вещь она не будет так

работать я быстро передела вы получаю

работающую версию вот в этом плане типа

очень крутые то есть они позволяют

поставить капкан в тот момент когда

программист лучше всего понимает чём

пишет плюс они позволяют ставить такие

быстрые капканы которые быстро ловят

ошибки еще простоты этапе фигачь и не

кода но безусловно есть и минусы

а типы они позволяют ловить тока

ожидаемые ошибки да то есть большие то

как правило programmer эрарта

мы например для большинства случаев не

сможем типами поймать проблемы с

архитектурами проблемы с потреблением

памяти с потреблением ресурсами с

производительностью и так далее а тест и

можно использовать как для отлова таких

ошибок так и для отлова собственно

говоря ошибок окружения

и неожиданных ошибок поэтому на практике

очень хорошо комбинировать этот под эти

подходы типы используется для отлова

отепя так расстановки капканов в коде на

собственно говоря синтаксиса

архитектурные вопросы и тесты

используются для отлова проблем с

выполнением кода с лойко работы и так

далее функциональный нагрузочный и и нет

и так далее и ответил на ваш вопрос не

до конца но смысле еще не закончил да по

поводу области внимания на сколько я

видел примеры описания типов

каждый раз описывая типы вы добавляете

одну строчку

но соответственно но предположим что у

какого-нибудь среднего программиста

фокус внимания это там двадцать строк

вы эти двадцать строк вместо того чтобы

это было двадцать строк кода сделали

десять строк кода ну и соответственно вы

получаете программиста который может

быть грамотно подбирает слова на говорит

со скоростью кличко но скорость

разработки от этого вообще ни разу не

увеличивается

типа не увеличивают скорость разработки

более того те типы замедляют скорость а

вот вот там а что вы тратите время на

установку капканов тут как раз основная

идея баланса в том что вы

зная о том что он а этот проект может

взлететь вы вначале фигачить и без типов

от grey dial typing о котором я

рассказывали и если ваш прототип взлетел

то вы инвестируете туда время ставите

туда эти капканы но за счет этого вы

повышаете качество вашего кода и вам нет

необходимости выкидывать python и

переписывать все на джерри и ещё два

вопроса такая 1 typescript вам как бы

проверяется на этапе компиляции и потом

все окей я просто не уверен

он как python работает это на скорость

выполнения файла все вот эти проверки

ну на скорость работы кода как-то влиять

или эти инструкции только для линкоров

сам интерпретатор или что там эти

инструкции только для линкоров

скомпилирована мпа и he это будет на

условно горят запихнут в аннотации то

есть специальное такое

property функции до которые сожрут

немного памяти и все более того даже из

памяти можно выкинуть сказать что на

этапе runtime а нам это не нужно вообще

вот так так что это никак не отразится

на скорость и надеюсь что последний про

расстановку ловушек опять же в джесси

есть такая техника когда например

функции методы расставляют assert и

которые проверяют параметры там какие-то

промежуточные значения на соответствие

условиям и это потом вырезается

это не тип проверяется а там я не знаю x

больше 0 и меньше 20 но такого рода

проверки для поэта на что-нибудь такое

есть df пойти не херст и уже мнение

черты

но окей а сердце да но это assert и

которые работают пока разработчик код но

пишет потом когда это все тепло и c ну и

само собой удаляется

коллегия помогите мне пожалуйста спасибо

я так не могу все сама идея этого это

по-моему даже pink и когда у тебя прямо

фронтами могут быть какие-то проверки

типов да ты про это ну да да в обще

проверки чтоб можно было на state женге

это всё ловить а потом на проди как-то

так фырфырфыр и чтобы этого кода не было

релиз

сфере вообще набрал слышал по радио о

том что в продакшене за тоже есть и это

как бы да немножко замедляет runtime но

это позволяет ловить какие-то нетипичные

вещей и для дебага очень полезно когда

ты реально что-то упало но вообще я

слышал по реализации отдельных библиотек

то есть это реализуется что такое

поверх адам поверх библиотек или модулей

вот ну и на крайняк но такая штука

гриппом реализуется за 10 минут потом

еще неделю отлаживается и а где то так

чтобы вот что то такое fight они сейчас

было именно по поводу а черта в которые

кстати очень очень хороший механизм

который вместе с тестами используется

вот так вот сходу мне в голову не

приходит но опять же я генерале ст

да то есть управление разработки там 20

языков программирования сотни

фреймворков и так далее я full-time 8

часов в день 5 дней в неделю поэтому

разработка не занимаюсь поэтому я могу

что-то упустить если вдруг что-то

всплывет

пишите и те кто смотрит нас записи тоже

пишите мы это все дополним расширим и

углубим мне два небольших вопроса один

из них до появления той pint of как бы

для напоминания самому себе а типов

переменных использовались друг стринги в

каком-нибудь из многочисленных форматов

допустим достаточно стандартизованных и

насколько я понимаю теперь это в этом

нету необходимость именно определять тип

в док стрингах теперь в этом нет

необходимости за исключением python 27

где я собственно говоря там она и

определяет

хорошо еще из этого исходит один

маленький вопрос именно с вот этими вот

допустим так стрингами у нас

могли работать всякие средства допустим

то составление документации тот же

сфинкс он умеет это все дело аккуратно

парсить и делать выводить нам красивую

страничку это все уже поддерживается

допустим вот из этой плиты они уже

поддерживаться подобными средствами это

очень хороший вопрос к сожалению я не

знаю на него ответа

тут надо смотреть но учитывая что python

3 5 с пепом 0 4 8 4 они появились

буквально месяц назад вот там надо

смотреть но я могу сказать что с

подавляющими шансами скоро все будет

благо это очень легко технически сделать

вся эта информация сохраняется в эту

информацию функции и извлекается оттуда

на раз два три и больше дополнения по

прошлому вопросы у меня коллега

быстренько на телефоне нашел в общем

опции есть собственно говоря поэта на

минус а большая да да она встречается

сердце просто вантами описать раз сердцу

и вот микрофон может катать на первое

упоминание нас ландик там где было

первое упоминание

собственно типа в питоне там где был стр

1 а им до там за себя был айди и на им

тебя был type стр как бы вопрос про то

что эдита может быть собственно тоже

стринги очень часто это строка да

конечно и как раз при факторинге будет

автоматически пойман кейс что что это

просто назвали как не очень удачно

или таки бака вот если совсем еще вопрос

а если

проверки типов атак лего но больше часть

проверок идет как раз таки исходит из

того что ты получаешь эту информацию из

внешней среды например тебе приходит

айди с базы а ты заранее не знаешь базе

это допустим строка или это число или а

с точки зрения нашего решения чаще всего

это как раз будет та самая неожиданная

ошибка почему а потому что писать тесты

интеграционное под все это до 1 г

поэтому в рамках борьбы с неожиданной

ошибки

что мы ставим какой-нибудь капкан вот

видео сердца

вот и когда настей дженги интеграционный

тест запускается у нас взрывается этот

assert и мы стучим разработчика базы и

говорим что ребята вот чего нам отдали

до починить пожалуйста не делайте так

больше

вот либо безусловно если мы пишем софт

для атомного реактора автоматически

неожиданно становится не неожиданный

ожидаемый и мы начинаем делать что-то в

коде например генерировать это и другой

из dsl

но это реально дорого решил я писать на

по это не и делать это сразу

ну на рельсы стать чтобы вот никуда не

сойти с правильного пути как мне всю вот

эту радость но пять шагов как подключить

возможные линкоры и что что куда

воткнуть первый вариант вы спускаете

последний пай charm у вас все работает

из коробки второй вариант если у вас

есть кантину сын ты греешь and a вы

просто в один из шагов ставите май пай

указав ему в качестве аргумента папочку

с проектом и май по я выдает встр если

там чего-нибудь с типами есть

какая-нибудь приблуда которая заставляет

я не знаю не меньше десяти определение

типа на файл но потому что если я

поставлю мой пай если я правильно

понимаю и не буду использовать ставьте

финишный файле

ну просто не буду ни писать никаких

инструкций для линкора то он ничего не

это скорее всего будет добавлено в

poyлинг

но это уже очень высокоуровневые вещи

которые нам при необходимости можно там

гриппом сделать если вспомнить через

сколько десятилетий в тех же плюсах

появились что узлы для автоматического

анализа там кто этой же циклом а

тической сложности вот эту же высшей

черной магии не думаю

что она прям так быстро быстро появится

но такие вещи при необходимости не очень

сложно делать руками потому что как я

уже говорил python эту всю информацию и

сохраняет в сигнатуру функции вот

поэтому можете написать несложный тест

который вам все это скажет работа с

спектор java script для линкоров

практикуется вообще или нет а прошу

прощения не расслышал чем ну java

скрипте кучу линкоров пишут которые

занимаются анализом st для трона

что-нибудь такое делают мои по и он для

in her как раз делает анализ st

вот вообще winters для python а которые

сделают анализ astm poyлинг я же не пишу

на питоне поэтому я не невку для поэта

на этих линкоров их просто вот там много

и спасибо нет вопросиков очень хорошо ну

что ж спасибо это были очень клёвые

вопросы

